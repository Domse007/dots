#+TITLE: A clean emacs config is an empty config file.
#+AUTHOR: Jakob Klemm
#+EMAIL: jakob.klemm@protonmail.com
Emacs Config - Jakob Klemm
* Setup
** =use-package=
  Verify the =use-package= installation and ensures the packages.
  #+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
  #+end_src
** Update and compile
  Update and compile all packages.
  #+begin_src emacs-lisp
  (use-package auto-compile
    :config (auto-compile-on-load-mode))
  (setq load-prefer-newer t)
  #+end_src
** Defaults
  Default settings cloned from [[https://github.com/hrs/sensible-defaults.el][Harry R. Schwartz]].
  Functions:
  - Ensuring that files end with newlines,
  - Always enabling syntax highlighting,
  - Increasing the garbage collection threshold,
  - Defaulting line-length to 80 characters,
  - Creating parent directories after saving a deeply nested file.
  #+begin_src emacs-lisp
  (load-file "~/.emacs.d/sensible-defaults.el/sensible-defaults.el")
  (sensible-defaults/use-all-settings)
  (sensible-defaults/use-all-keybindings)
  ;; Disable all backups.
  (setq make-backup-files nil)
  #+end_src
** Resources
  Add =resources= to the path
  #+begin_src emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/resources/")
  #+end_src
* Interface
** Disable
*** Scroll bar
   Disable the scroll bar in the entire window and mini buffers.
   #+begin_src emacs-lisp
   ;; Menu bar
   (tool-bar-mode 0)
   (menu-bar-mode 0)
   (scroll-bar-mode -1)
   ;; Minibuffer
   (set-window-scroll-bars (minibuffer-window) nil nil)
   #+end_src
*** Minor modes
   Hide all minor modes with =minions=.
   #+begin_src emacs-lisp
   (use-package minions
   :config
   (setq minions-mode-line-lighter ""
   minions-mode-line-delimiters '("" . ""))
   (minions-mode 1))
   #+end_src
*** Scrolling
   Don't skip to center of page when at bottom / top, /normal/ smooth scrolling.
   #+begin_src emacs-lisp
   (setq scroll-conservatively 100)
   #+end_src
** Symbols
Prettify symobls.
#+begin_src emacs-lisp
(global-prettify-symbols-mode 1)
(defun add-pretty-lambda ()
"Make some word or string show as pretty Unicode symbols.  See https://unicodelookup.com for more."
(setq prettify-symbols-alist
'(
("lambda" . 955)
("delta" . 120517)
("epsilon" . 120518)
("->" . 8594)
("<-" . 8592)
("<=" . 8804)
(">=" . 8805)
("=~" . 8771)
("!=" . 8800)
(":=" . 8788)
)))
(add-hook 'prog-mode-hook 'add-pretty-lambda)
(add-hook 'org-mode-hook 'add-pretty-lambda)
#+end_src
** Mod line
Doom mod line.
		#+begin_src emacs-lisp
		(use-package doom-modeline
		:ensure t
		:init (doom-modeline-mode 1))
        #+end_src
		Config and settings for mod line, from [[https:github.com/seagle0128/doom-modline][doom-modline]]
		#+begin_src emacs-lisp
		(setq doom-modeline-icon (display-graphic-p))
		(setq doom-modeline-major-mode-icon t)
		(setq doom-modeline-buffer-state-icon t)
		(setq doom-modeline-buffer-modification-icon t)
		(setq doom-modeline-unicode-fallback nil)
		(setq doom-modeline-minor-modes nil)
		(setq doom-modeline-enable-word-count nil)
		(setq doom-modeline-buffer-encoding t)
		(setq doom-modeline-lsp t)

		;; Whether display the environment version.
		(setq doom-modeline-env-version t)
		;; Or for individual languages
		(setq doom-modeline-env-enable-python t)
		(setq doom-modeline-env-enable-ruby t)
		(setq doom-modeline-env-enable-perl t)
		(setq doom-modeline-env-enable-go t)
		(setq doom-modeline-env-enable-elixir t)
		(setq doom-modeline-env-enable-rust t)
		(display-time-mode 1)
		#+end_src
** Fullscreen
   #+begin_src emacs-lisp
   (add-to-list 'default-frame-alist '(fullscreen . maximized))
   #+end_src
** Current line
    Hightlight the current line.
    #+begin_src emacs-lisp
    (global-hl-line-mode)
		;; Marked number
		(set-face-background hl-line-face "#090405")
    #+end_src
** Line numbers
   #+begin_src emacs-lisp
    (global-display-line-numbers-mode)
   #+end_src
** Kill and close
		Kill the current buffer and close the window in one command.
		#+begin_src emacs-lisp
		(global-set-key (kbd "C-x j") 'kill-buffer-and-window)
		#+end_src
** Cursor
Set the cursor color to the same as beacon.
#+begin_src emacs-lisp
(set-cursor-color "#c678dd")
#+end_src
** Images
Display images inline.
Toggle with =C-c C-x C-v=
#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-toggle-inline-images)
#+end_src
** Theme
Used themes:
- Elixify - AstonJ (elixirforum)
- Doom-nord
- Doom-material
- Doom-spacegrey
#+begin_src emacs-lisp
(use-package doom-themes)
(load-theme `doom-nord t)
;; (load-theme `doom-material t)
;; (load-theme `doom-spacegrey t)
#+end_src
** Dashboard
   Setup the dashboard with come modifications and configs.
*** Dependancies
   Page-break-lines
   #+begin_src emacs-lisp
   (use-package page-break-lines)
   (turn-on-page-break-lines-mode)
   #+end_src
   Install icons.
   Not only used by =dashboard= but its the main dependancy.
   #+begin_src emacs-lisp
   (use-package all-the-icons)
   #+end_src
*** Setup
    Setup the dashboard.
    #+begin_src emacs-lisp
    ;; Disable *scratch*
    (setq inhibit-startup-screen t
      initial-buffer-choice  nil)

    (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook))
    #+end_src
*** Config
    Options and configuration for dashboard following the readme.
    #+begin_src emacs-lisp
      ;; Set the banner
      (setq dashboard-startup-banner 2)
      ;; Content is not centered by default. To center, set
      (setq dashboard-center-content t)
      ;; Icons
      (setq dashboard-set-heading-icons t)
      (setq dashboard-set-file-icons t)
      ;; Navigator
      (setq dashboard-set-navigator t)
      ;; Init info
      (setq dashboard-set-init-info t)
      ;; Message
      (setq dashboard-footer-messages '("Every time I see this package I think to myself \"People exit Emacs?\""))

      (setq dashboard-items '((recents  . 10)
                              (agenda . 15)))
    #+end_src
** Font
	 Use Fira Code as default font.
	 #+begin_src emacs-lisp
       (set-face-attribute
        'default nil
        :font "Fira Code"
        :weight 'normal
        :width 'normal
        )
	 #+end_src
** New window
Directly switch to new window after opening.
(Credit: hrs)
#+begin_src emacs-lisp
(defun hrs/split-window-below-and-switch ()
"Split the window horizontally, then switch to the new pane."
(interactive)
(split-window-below)
(balance-windows)
(other-window 1))

(defun hrs/split-window-right-and-switch ()
"Split the window vertically, then switch to the new pane."
(interactive)
(split-window-right)
(balance-windows)
(other-window 1))

;; Keys
(global-set-key (kbd "C-x 2") 'hrs/split-window-below-and-switch)
(global-set-key (kbd "C-x 3") 'hrs/split-window-right-and-switch)
#+end_src
** Ace
Use =ace-windows=, mainly as a dependency for =org-roam=
#+begin_src emacs-lisp
(global-set-key (kbd "M-o") 'ace-window)
#+end_src
** Beacon
	 Beacon for highlighting the cursor when switching buffers.
	 #+begin_src emacs-lisp
       (use-package beacon
         :custom
         (beacon-color "#c678dd")
         :hook (after-init . beacon-mode))
	 #+end_src
** Title
	 Set the window title to the current file.
	 #+begin_src emacs-lisp
	 (setq-default frame-title-format
   '(:eval
   (format "%s@%s: %s %s"
   (or (file-remote-p default-directory 'user)
   user-real-login-name)
   (or (file-remote-p default-directory 'host)
   system-name)
   (buffer-name)
   (cond
   (buffer-file-truename
   (concat "(" buffer-file-truename ")"))
   (dired-directory
   (concat "{" dired-directory "}"))
   (t
   "[no file]")))))
	 #+end_src
** Resize
Easy zoom in & out.
#+begin_src emacs-lisp
  (defun zoom-in ()
    (interactive)
    (let ((x (+ (face-attribute 'default :height)
                10)))
      (set-face-attribute 'default nil :height x)))

  (defun zoom-out ()
    (interactive)
    (let ((x (- (face-attribute 'default :height)
                10)))
      (set-face-attribute 'default nil :height x)))

  (define-key global-map (kbd "C-1") 'zoom-in)
  (define-key global-map (kbd "C-0") 'zoom-out)
#+end_src
** Move
Move between multiple open windows.
#+begin_src emacs-lisp
(when (fboundp 'windmove-default-keybindings)
(windmove-default-keybindings))
#+end_src
** Previous buffer
Quickly switch to the previous buffer, useful for =org-agenda=
#+begin_src emacs-lisp
(define-key global-map (kbd "C-x x") 'previous-buffer)
#+end_src
* Projects
** Editing
*** Indentation
Copied from [[https://github.com/MatthewZMD/.emacs.d][.emacs.d]]
		#+begin_src emacs-lisp
		(use-package highlight-indent-guides
		:if (display-graphic-p)
		:diminish
		;; Enable manually if needed, it a severe bug which potentially core-dumps Emacs
		;; https://github.com/DarthFennec/highlight-indent-guides/issues/76
		:commands (highlight-indent-guides-mode)
		:custom
		(highlight-indent-guides-method 'character)
		(highlight-indent-guides-responsive 'top)
		(highlight-indent-guides-delay 0)
		(highlight-indent-guides-auto-character-face-perc 7))
    	#+end_src
		Indent config
		#+begin_src emacs-lisp
		(setq-default indent-tabs-mode nil)
		(setq-default indent-line-function 'insert-tab)
		(setq-default tab-width 4)
		(setq-default c-basic-offset 4)
		(setq-default js-switch-indent-offset 4)
		(c-set-offset 'comment-intro 0)
		(c-set-offset 'innamespace 0)
		(c-set-offset 'case-label '+)
		(c-set-offset 'access-label 0)
		(c-set-offset (quote cpp-macro) 0 nil)
		(defun smart-electric-indent-mode ()
		"Disable 'electric-indent-mode in certain buffers and enable otherwise."
		(cond ((and (eq electric-indent-mode t)
        (member major-mode '(erc-mode text-mode)))
        (electric-indent-mode 0))
        ((eq electric-indent-mode nil) (electric-indent-mode 1))))
		(add-hook 'post-command-hook #'smart-electric-indent-mode)
        #+end_src
*** CamelCase
    Treat camel casing (the best and only right variable naming system) as multiple words.
    #+begin_src emacs-lisp
    (use-package subword
    :config (global-subword-mode 1))
    #+end_src
*** UTF-8
    Treat every file as UTF-8 by default.
    #+begin_src emacs-lisp
    (set-language-environment "UTF-8")
    #+end_src
*** Wrap
		Auto wrap paragraphs. Or use =M-q=.
    #+begin_src emacs-lisp
		(add-hook 'text-mode-hook 'auto-fill-mode)
		(add-hook 'gfm-mode-hook 'auto-fill-mode)
		(add-hook 'org-mode-hook 'auto-fill-mode)
    #+end_src
*** Spacing
		Cycle spacing options.
		#+begin_src emacs-lisp
		(global-set-key (kbd "M-SPC") 'cycle-spacing)
		#+end_src
*** Modes
Other /cool/ default modes.
#+begin_src emacs-lisp
(show-paren-mode 1)
(column-number-mode 1)
(size-indication-mode 1)
(transient-mark-mode 1)
(delete-selection-mode 1)
#+end_src
*** Undo tree
	 Visual undo tree
	 #+begin_src emacs-lisp
	 (use-package undo-tree
  :defer t
  :diminish undo-tree-mode
  :init (global-undo-tree-mode)
  :custom
  (undo-tree-visualizer-diff t)
  (undo-tree-visualizer-timestamps t))
	#+end_src
** Helper
*** Kill current
		Kill the current buffer instead of asking.
		#+begin_src emacs-lisp
		(defun kill-current-buffer ()
    (interactive)
    (kill-buffer (current-buffer)))

		;; Keybind
		(global-set-key (kbd "C-x k") 'kill-current-buffer)
		#+end_src
*** Save
Save the location within a file.
#+begin_src emacs-lisp
(save-place-mode t)
#+end_src
*** Which key
Helpful with long keybinds.
#+begin_src emacs-lisp
(use-package which-key
:config (which-key-mode))
#+end_src
*** Jump
Jump to function definitions.
(Works with elixir)
#+begin_src emacs-lisp
(use-package dumb-jump
:ensure t
:bind (("M-g o" . dumb-jump-go-other-window)
("M-g j" . dumb-jump-go))
:config (setq dumb-jump-selector 'ivy))
	  #+end_src
*** Refresh
Auto refresh updated files to avoid overwriting changes.
#+begin_src emasc-lisp
(global-auto-revert-mode t)
#+end_src
** Correction
*** Spell check
Enable spellcheck for both English and German in all =org-mode= and
=text-mode= buffers.
Select the current spellcheck with =ispell-change-directory=, then use =C-.= to
see suggestions and see issues with =flyspell-buffer=.
#+begin_src emacs-lisp
  (setq ispell-program-name "hunspell")
  (setq ispell-hunspell-dict-paths-alist
        '(("en_US" "~/.emacs.d/dict/en_US.aff")
          ("de_DE" "~/.emacs.d/dict/de_DE.aff")))

  (setq ispell-local-dictionary "en_US")
  (setq ispell-local-dictionary-alist
        '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US") nil utf-8)
          ("de_DE" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US" "-a" "-i" "UTF-8") nil utf-8)))

  (flyspell-mode 1)
  (add-hook 'text-mode-hook #'flyspell-mode)
  (add-hook 'org-mode-hook #'flyspell-mode)

  (global-set-key (kbd "C-.") 'ispell-word)
#+end_src
*** Completion
Use package =company= as a dependency of lsp-mode.
#+begin_src emacs-lisp
(use-package company)
(add-hook 'after-init-hook 'global-company-mode)
(use-package lsp-mode
:commands lsp
:ensure t
:diminish lsp-mode
:hook
(elixir-mode . lsp)
:init
(add-to-list 'exec-path "~/.emacs.d/elixir-ls"))
#+end_src
Fly check mode.
#+begin_src emacs-lisp
(use-package flycheck)
(global-flycheck-mode)
#+end_src
Configure =lsp-mode=
#+begin_src emacs-lisp
(use-package lsp-ui :commands lsp-ui-mode)
(use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
#+end_src
** Shell
Bind =C-x t= to =eshell=.
#+begin_src emacs-lisp
(global-set-key (kbd "C-x t") 'eshell)
#+end_src
** Ivy - Swiper
Use Ivy and Swiper over Helm.
#+begin_src emacs-lisp
  (use-package swiper)
  (use-package ivy)
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq enable-recursive-minibuffers t)
  (setq search-default-mode #'char-fold-to-regexp)
  (global-set-key "\C-s" 'swiper)

  (use-package amx
    :ensure t
    :after ivy
    :custom
    (amx-backend 'auto)
    (amx-save-file "~/.emacs.d/amx-items")
    (amx-history-length 50)
    (amx-show-key-bindings nil)
    :config (amx-mode 1))

  (use-package all-the-icons-ivy-rich
    :ensure t
    :init (all-the-icons-ivy-rich-mode 1))

  (use-package ivy-rich
    :ensure t
    :after ivy
    :custom (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line)
    :config (ivy-rich-mode 1))


  #+end_src
** Posframe
Use posframe for Ivy & Swiper.
#+begin_src emacs-lisp
(use-package ivy-posframe
  :after ivy
  :init (ivy-posframe-mode 1)
  :config (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-center))
		ivy-posframe-border-width 8))

(setq ivy-posframe-parameters
      '((left-fringe . 4)
        (right-fringe . 4)))
(setq ivy-posframe-border-width 2)
#+end_src
** Snippets
Use yasnippets and the snippets from github.com/hrs/dotfiles
#+begin_src emacs-lisp
(use-package yasnippet)
(setq yas-snippet-dirs '("~/.emacs.d/snippets/text-mode"))
(yas-global-mode 1)
(setq yas-indent-line 'auto)
(define-key yas-minor-mode-map (kbd "<tab>") nil)
(define-key yas-minor-mode-map (kbd "TAB") nil)
(define-key yas-minor-mode-map (kbd "<C-tab>") 'yas-expand)
#+end_src
** Management
Projectile for project management.
#+begin_src emacs-lisp
(use-package projectile)
(projectile-mode +1)
(define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
#+end_src
** Magit
Magit keybinds.
#+begin_src emacs-lisp
(use-package magit)
(global-set-key (kbd "C-x g") 'magit-status)
(global-set-key (kbd "C-x p") 'magit-init)
#+end_src
Highlight keywords like todo in files and in magit.
#+begin_src emacs-lisp
(use-package magit-todos)
(magit-todos-mode t)
#+end_src
** GREP
Plain text search using xah-find.
Bound to =C-x C-j=.
#+begin_src emacs-lisp
(use-package xah-find)
(global-set-key (kbd "C-x C-j") 'xah-find-text)
#+end_src
** Search
For plain text document search with use of =recoll=, instead of =GREP=.
#+begin_src emacs-lisp
(require 'org-recoll)
;;(load "org-recoll")
(global-set-key (kbd "C-c g") 'org-recoll-search)
(global-set-key (kbd "C-c u") 'org-recoll-update-index)
#+end_src
* Programming
** Elixir
   Elixir major mode with syntax highlighting etc.
   #+begin_src emacs-lisp
   (unless (package-installed-p 'elixir-mode)
   (package-install 'elixir-mode))
  #+end_src
  Commands:\\
  Use
  -  M-x elixir-format
  to format the document following mix styleguide.
** Web mode
   Web mode and enable rainbow mode for hex colors.
   #+begin_src emacs-lisp
   (use-package web-mode)
   (add-hook 'web-mode-hook
   (lambda ()
   (rainbow-mode)
   (rspec-mode)
   (setq web-mode-markup-indent-offset 2)))
   #+end_src
** Golang
   Golang major mode.
   #+begin_src emacs-lisp
   (use-package go-mode)
   (use-package go-errcheck)
   #+end_src
** JavaScript
   JavaScript major mode.
   #+begin_src emacs-lisp
   (use-package coffee-mode)
   #+end_src
** Rust
   Rust major mode.
   #+begin_src emacs-lisp
   (use-package rust-mode)
   #+end_src
** Scala
   Scala major mode.
   #+begin_src emacs-lisp
   (use-package scala-mode
   :interpreter
   ("scala" . scala-mode))
   (use-package sbt-mode)
   #+end_src
** Markdown
	 Github markdown.
	 #+begin_src emacs-lisp
   (use-package markdown-mode
   :commands gfm-mode
   :mode (("\\.md$" . gfm-mode))
   :config
   (setq markdown-command "pandoc --standalone --mathjax --from=markdown")
   (custom-set-faces
   '(markdown-code-face ((t nil)))))
   #+end_src
** Modes
*** Docker
#+begin_src emacs-lisp
(use-package dockerfile-mode)
#+end_src
***
* Org-mode
** Bullets
   Use org-bullets whenever possible.
   #+begin_src emacs-lisp
   (use-package org-bullets
   :init
   (add-hook 'org-mode-hook 'org-bullets-mode))
   #+end_src
** Folded
   Instead of "..." show a downward pointing arrow at the end of title.
   TODO Change symbol or something.
   #+begin_src emacs-lisp
   (setq org-ellipsis "➘")
   #+end_src
** Table of content
Org-mode toc
#+begin_src emacs-lisp
(use-package toc-org)
(add-hook 'org-mode-hook 'toc-org-enable)
#+end_src
** Indent mode
   Globally enable =org-indent-mode=
   #+begin_src emacs-lisp
   (add-hook 'org-mode-hook 'org-indent-mode)
   #+end_src
** Code block
   Highlight the entire code block when editing.
   #+begin_src emacs-lisp
   (setq org-src-fontify-natively t)
    #+end_src
** Todos
Differentiate between org-agenda for calendar events and org-todos for general
todos.
*** Location
		Org document storage location for archive and other documents.
		#+begin_src emacs-lisp
		(setq org-directory "~/private/documents")

		(defun org-file-path (filename)
		"Return the absolute address of an org file, given its relative name."
		(concat (file-name-as-directory org-directory) filename))

		(setq org-archive-location "~/private/archive/archive.org::* From %s")
		#+end_src
*** Archive
	 Hitting =C-c C-x C-s= will mark a todo as done and move it to an appropriate
	 place in the archive.
   #+begin_src emacs-lisp
   (defun hrs/mark-done-and-archive ()
   "Mark the state of an org-mode item as DONE and archive it."
   (interactive)
   (org-todo 'done)
   (org-archive-subtree))
   ;; Shortcut to archive
   (define-key org-mode-map (kbd "C-c C-x C-s") 'hrs/mark-done-and-archive)
   #+end_src
*** Time
	Record the time that a todo was archived.
    #+begin_src emacs-lisp
    (setq org-log-done 'time)
    #+end_src
*** Check
	 Ensure that a task can't be marked as done if it contains unfinished subtasks
	 or checklist items. This is handy for organizing "blocking" tasks
	 hierarchically.
   #+begin_src emacs-lisp
   (setq org-enforce-todo-dependencies t)
   (setq org-enforce-todo-checkbox-dependencies t)
   #+end_src
*** States
	 Add new states to the todo cycle to extend the basic TODO and DONE states that
	 org mode normally provides.
   #+begin_src emacs-lisp
     (setq org-todo-keywords
           '((sequence "TODO(t)" "PROGRESS(p)" "BLOCKED(b)" "|" "DONE(d)" "PAL(a)")
             (sequence "IDEA(i)" "NOTE(n)" "|" "DONE(f)")))
   #+end_src
*** Faces
Color for the different states.
#+begin_src emacs-lisp
(setq org-todo-keyword-faces
      '(("IDEA" . (:foreground "#facb20" :weight bold))
        ("TODO" . (:foreground "#af1212" :weight bold))
        ("PROGRESS" . (:foreground "#a8fa80" :weight bold))
        ("BLOCKED" . (:foreground "#b213c4" :weight bold))
        ("PAL" . (:foreground "#30bb03" :weight bold))
        ("NOTE" . (:foreground "#eaa222" :weight bold))
        ("DONE" . (:foreground "#ffffff" :weight bold))
        ))
#+end_src
** Tags
Default tags with keys.
#+begin_src emacs-lisp
    (setq org-tag-persistent-alist
          '((:startgroup . nil)
            ("HOME" . ?h)
            ("ADMIN" . ?a)
            ("PRIVATE" . ?x)
            ("DATA" . ?d)
            ("PROJECTS" . ?p)
            ("PRÜFUNG" . ?u)
            ("SCHULE" . ?y)
            (:endgroup . nil)
            (:startgroup . nil)
            ("BG" . ?1)
            ("BIO" . ?2)
            ("CHEM" . ?3)
            ("DE" . ?4)
            ("ENG" . ?5)
            ("FRANZ" . ?6)
            ("GER" . ?7)
            ("GEO" .?8)
            ("GS" . ?9)
            ("MATH" . ?q)
            ("MSPAM" . ?w)
            ("PHY" . ?e)
            ("PSPAM" . ?r)
            ("SPORT" . ?t)
            ("PU" . ?z)
            (:endgroup . nil)
            )
          )
  (define-key org-mode-map (kbd "C-c q") 'org-set-tags-command)
  (use-package counsel)
  ;;(global-set-key [remap org-set-tags-command] #'counsel-org-tag)

  (setq org-tag-faces
        '(
          ("HOME" . (:foreground "GoldenRod" :weight bold))
          ("ADMIN" . (:foreground "Red" :weight bold))
          ("PRIVATE" . (:foreground "LimeGreen" :weight bold))
          ("DATA" . (:foreground "LimeGreen" :weight bold))
          ("PROJECTS" . (:foreground "OrangeRed" :weight bold))
          ("WARRICK" . (:foreground "OrangeRed" :weight bold))
          ("EREBOS" . (:foreground "OrangeRed" :weight bold))

          ("BG" . (:foreground "GoldenRod" :weight bold))
          ("BIO" . (:foreground "GoldenRod" :weight bold))
          ("CHEM" . (:foreground "GoldenRod" :weight bold))
          ("GER" . (:foreground "GoldenRod" :weight bold))
          ("DE" . (:foreground "GoldenRod" :weight bold))
          ("ENG" . (:foreground "GoldenRod" :weight bold))
          ("FRANZ" . (:foreground "GoldenRod" :weight bold))
          ("GEO" . (:foreground "GoldenRod" :weight bold))
          ("GS" . (:foreground "GoldenRod" :weight bold))
          ("MATH" . (:foreground "GoldenRod" :weight bold))
          ("MSPAM" . (:foreground "GoldenRod" :weight bold))
          ("PHY" . (:foreground "GoldenRod" :weight bold))
          ("PSPAM" . (:foreground "GoldenRod" :weight bold))
          ("PE" . (:foreground "GoldenRod" :weight bold))
          ("PU" . (:foreground "GoldenRod" :weight bold))
          ("SCHULE" . (:foreground "DarkMagenta" :weight bold))
          ("PRÜFUNG" . (:foreground "Magenta" :weight bold))
          )
        )
#+end_src
** Priority
Colored priorities.
#+begin_src emacs-lisp
(setq org-priority-faces '((?A . (:foreground "red" :weight 'bold))
                           (?B . (:foreground "yellow"))
                           (?C . (:foreground "green")))
)
#+end_src

** Agenda
Super agenda is only meant for a general overview and more common tasks. All
school related TODOs are found through the special view only for school.
*** Agenda
    #+begin_src emacs-lisp
      (defun todo/done ()
        (interactive)
        (org-todo 'done))

      ;; Make agenda a global keybind.
      (global-set-key (kbd "C-c  a") 'org-agenda)

      (define-key org-mode-map (kbd "C-c d") 'org-deadline)
      (define-key org-mode-map (kbd "C-c s") 'org-schedule)
      (define-key org-mode-map (kbd "C-c f") 'org-time-stamp)
      (define-key org-mode-map (kbd "C-c t") 'org-todo)
      (define-key org-mode-map (kbd "C-c x") 'todo/done)
      (define-key org-mode-map (kbd "C-c e") 'org-set-effort)
	 #+end_src
*** Commands
=org-super-agenda=
#+begin_src emacs-lisp
  (use-package org-super-agenda
      :ensure t
      :config (org-super-agenda-mode)
      )
    (setq org-agenda-custom-commands
          '(("c" "Super Agenda" agenda
             (org-super-agenda-mode)
             ((org-super-agenda-groups
               '(
                 (:name "Important"
                    :tag ("ADMIN")
                    :priority "A"
                    :time-grid t
                    :order 0
                    )
             (:name "Schule"
                    :tag ("SCHULE" "PRÜFUNG")
                    :order 1
                    )
             (:name "Personal"
                    :tag ("DATA" "HOME" "PRIVATE")
                    :order 1
                    )
             (:name "Projects"
                    :tag ("PROJECTS" "EREBOS" "WARRICK")
                    :order 2
                    )
             (:priority<= "B"
                          :order 3
                          )
             )))
             (org-agenda nil "a"))
            ("g" "TODOs nach Priorität sortiert."
                        (
              (agenda "")
              (tags "PRIORITY=\"A\""
                    ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                     (org-agenda-overriding-header "High-priority unfinished tasks:")))))

                       ("d" "Agenda für private Pflichten und Aufgaben."
             ((agenda)
              (tags-todo "HOME|PRIVATE"
                         ((org-agenda-overriding-header "Private Pflichen und Aufgaben."))
                         )
              (tags-todo "DATA"
                         ((org-agenda-overriding-header "Eingegangene Daten, noch zu verarbeiten."))
                         )
              ))
            ("s" "Agenda für Schule und Prüfungen."
             ((agenda)
              (tags-todo "SCHULE|BG|BIO|CHEM|DE|ENG|FRANZ|GER|GEO|GS|MATH|MSPAM|PHY|PSPAM|PE|PU"
                         ((org-agenda-overriding-header "Hausaufgaben, Abgaben und andere Pflichten und Termine."))
                         )
              (tags "PRÜFUNG"
                    (
                     (org-agenda-overriding-header "Prüfungen und notenrelevante Termine.")
                     (org-agenda-sorting-strategy '(priority-up))))))
            ("f" "Alle aktuellen TODOs"
             ((agenda)
              (todo)
              ))
            ("b" "Blocked TODO's"
             ((agenda)
              (tags-todo "BLOCKED|PAL"
                         ((org-agenda-overriding-header "Blockierte TODOs oder Status unbekannt. "))
                )
              ))
            ))
#+end_src
*** Path
Use the entire home directory for agenda files.
#+begin_src emacs-lisp
(setq org-agenda-files '("~/private/documents/"))
    #+end_src
    Add file to the list of included agenda files, bound =C-c v=
    #+begin_src emacs-lisp
    (define-key org-mode-map (kbd "C-c v") 'org-agenda-file-to-front)
    #+end_src

** Export
Allow export to markdown and beamer (for presentations).
#+begin_src emacs-lisp
(eval-after-load "org" '(require 'ox-odt nil t))
#+end_src
*** Code
		Allow =babel= to evaluate Emacs lisp, Ruby, dot, or Gnuplot code.
    #+begin_src emacs-lisp
		(use-package ob-go)
		(use-package ob-elixir)

		(use-package gnuplot)
		(org-babel-do-load-languages
		'org-babel-load-languages
		'((emacs-lisp . t)
		(ruby . t)
		(dot . t)
		(gnuplot . t)
		(python . t)
		(go . t)
		(sql . t)
		(elixir . t)
		))
    #+end_src
	Don't ask before evaluating code blocks.
  #+BEGIN_src emacs-lisp
    (setq org-confirm-babel-evaluate nil)

    ;; inside .emacs file
    (setq org-latex-listings 'minted
          org-latex-packages-alist '(("" "minted"))
          org-latex-pdf-process
          '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
            "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
            "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

  #+end_src
*** HTML
		Disable footer.
    #+begin_src emacs-lisp
		(setq org-html-postamble nil)
    #+end_src
** Tex
*** Parse
		Parse file after loading it.
    #+begin_src emacs-lisp
		(setq TeX-parse-self t)
    #+end_src
*** PDF-Latex
    #+begin_src emacs-lisp
		(setq TeX-PDF-mode t)
    #+end_src
*** Math mode
    #+begin_src emacs-lisp
		(add-hook 'LaTeX-mode-hook
		(lambda ()
		(LaTeX-math-mode)
		(setq TeX-master t)))
    #+end_src
** Links
Use =C-c C-l= to save the current file for linking.
Then use =C-c l= to insert a new link or write the saved one.
#+begin_src emacs-lisp
(global-set-key (kbd "C-c l") 'org-insert-link)
(define-key org-mode-map (kbd "C-c l") 'org-insert-link)
(global-set-key (kbd "C-c C-l") 'org-store-link)
(define-key org-mode-map (kbd "C-c C-l") 'org-store-link)
#+end_src
** Design
General improvements and design changes for =org-mode=, currently under the
=org-mode= heading instead of =Interface=.
Following [[https://zzamboni.org/post/beautifying-org-mode-in-emacs/][this]] blog.
#+begin_src emacs-lisp
  (setq org-hide-emphasis-markers t)
  (let* ((variable-tuple
          (cond ((x-list-fonts "ETBembo")         '(:font "ETBembo"))
                ((x-list-fonts "Fira Code") '(:font "Fira Code"))
                (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro."))))
         (base-font-color     (face-foreground 'default nil 'default))
         (headline           `(:inherit default :weight bold :foreground ,base-font-color)))
    (custom-theme-set-faces
     'user
     `(org-level-8 ((t (,@headline ,@variable-tuple))))
     `(org-level-7 ((t (,@headline ,@variable-tuple))))
     `(org-level-6 ((t (,@headline ,@variable-tuple))))
     `(org-level-5 ((t (,@headline ,@variable-tuple))))
     `(org-level-4 ((t (,@headline ,@variable-tuple :height 1.1))))
     `(org-level-3 ((t (,@headline ,@variable-tuple :height 1.25))))
     `(org-level-2 ((t (,@headline ,@variable-tuple :height 1.40))))
     `(org-level-1 ((t (,@headline ,@variable-tuple :height 1.55))))
     `(org-document-title ((t (,@headline ,@variable-tuple :height 2.0 :underline nil))))))

  (add-hook 'org-mode-hook 'visual-line-mode)

  (custom-theme-set-faces
   'user
   '(org-block ((t (:inherit fixed-pitch))))
   '(org-code ((t (:inherit (shadow fixed-pitch)))))
   '(org-document-info ((t (:foreground "dark orange"))))
   '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
   '(org-indent ((t (:inherit (org-hide fixed-pitch)))))
   '(org-link ((t (:foreground "dark orange" :underline t))))
   '(org-meta-line ((t (:inherit (font-lock-comment-face fixed-pitch)))))
   '(org-property-value ((t (:inherit fixed-pitch))) t)
   '(org-special-keyword ((t (:inherit (font-lock-comment-face fixed-pitch)))))
   '(org-table ((t (:inherit fixed-pitch :foreground "#83a598"))))
   '(org-tag ((t (:inherit (shadow fixed-pitch) :weight bold :height 0.8))))
   '(org-verbatim ((t (:inherit (shadow fixed-pitch))))))

#+end_src
* Content
** org-roam
(Configured under =/content= instead of =/org-mode=, might change in the future)
Org-roam setup for the entire =documents= directory.
#+begin_src emacs-lisp
    (use-package org-roam
      :ensure t
      :hook
      (after-init . org-roam-mode)
      :custom
      (org-roam-directory "~/documents/org/")
      :bind (:map org-roam-mode-map
                (("C-c r l" . org-roam)
                 ("C-c r f" . org-roam-find-file)
                 ("C-c r u" . org-roam-unliked-references)
                 ("C-c r g" . org-roam-graph-show)
                 ("C-c r s" . org-roam-server-mode))
                :map org-mode-map
                (("C-c r i" . org-roam-insert))
                (("C-c r I" . org-roam-insert-immediate))))

  (setq org-roam-index-file "~/documents/org/main.org")
  (setq org-roam-db-location "~/documents/org-roam.db")
  (add-hook 'after-init-hook 'org-roam-mode)

  (use-package company-org-roam
    :ensure t
    :config
    (push 'company-org-roam company-backends))
#+end_src
** org-roam-server
Dedicated config for =org-roam-server=
#+begin_src emacs-lisp
(use-package org-roam-server
  :ensure t
  :config
  (setq org-roam-server-host "127.0.0.1"
        org-roam-server-port 8080
        org-roam-server-authenticate nil
        org-roam-server-export-inline-images t
        org-roam-server-serve-files nil
        org-roam-server-served-file-extensions '("pdf" "mp4" "ogv")
        org-roam-server-network-poll t
        org-roam-server-network-arrows nil
        org-roam-server-network-label-truncate t
        org-roam-server-network-label-truncate-length 60
        org-roam-server-network-label-wrap-length 20))
#+end_src
** org-roam-config
Some configurations for =org-roam= inspired by [[https://www.reddit.com/r/emacs/comments/gsv5np/care_to_share_configs_for_how_you_use_orgroam/][Care to share configs for how you
use org-roam?]]
#+begin_src emacs-lisp
  (defun org-force-open-current-window ()
    (interactive)
    (let ((org-link-frame-setup (quote
                                 ((vm . vm-visit-folder)
                                  (vm-imap . vm-visit-imap-folder)
                                  (gnus . gnus)
                                  (file . find-file)
                                  (wl . wl)))
                                ))
      (org-open-at-point)))
  ;; Depending on universal argument try opening link
  (defun org-open-maybe (&optional arg)
    (interactive "P")
    (if arg
        (org-open-at-point)
      (org-force-open-current-window)
      )
    )

  ;; redefined to use org-open-maybe
  (defun ace-link-org (&optional arg)
    "Open a visible link in an `org-mode' buffer."
    (interactive "P")
    (require 'org)
    (let ((pt (avy-with ace-link-org
                        (avy-process
                         (mapcar #'cdr (ace-link--org-collect))
                         (avy--style-fn avy-style)))))
      (when (numberp pt)
        (goto-char pt)
        (org-open-maybe arg))
      ))

  (defun mmr/org-roam-insert-replace-region-with-link-and-follow ()
    (interactive )
    (let ((title (buffer-substring (mark) (point)) )
          (top (current-buffer)))
      (org-roam-find-file title)
      (let ((target-file (buffer-file-name (buffer-base-buffer)))
          (note-buffer (current-buffer)))
        (switch-to-buffer top nil t)
        (kill-region (mark) (point))
        (insert (concat "[[" target-file "][" title "]]"))
        (switch-to-buffer note-buffer nil t)
        (save-buffer))))

  (define-key org-mode-map (kbd "C-c o") 'org-open-maybe)
  (define-key org-mode-map (kbd "C-c r r") 'mmr/org-roam-insert-replace-region-with-link-and-follow)
#+end_src

#+RESULTS:
: mmr/org-roam-insert-replace-region-with-link-and-follow

** Hoth
#+begin_src emacs-lisp
(load-file "~/.emacs.d/hoth/hoth.el")
(require 'hoth)
(define-key org-mode-map (kbd "C-c r h") 'hoth-total)
#+end_src
** Notes
	 Deft for taking quick notes and storing them in plain text.
	 #+begin_src emacs-lisp
	 (use-package deft)
     (setq deft-default-extension "org")
     (setq deft-extensions '("org"))
	 (setq deft-directory "~/private/documents")
     (setq deft-recursive t)
	 (setq deft-text-mode 'org-mode)
	 (setq deft-use-filename-as-title t)

	 (define-key org-mode-map (kbd "C-c n") 'deft)
	 (define-key org-mode-map (kbd "M-c n") 'deft-find-file)
	 #+end_src
** Browser
Use =chrome= as the default browser for links.
#+begin_src emacs-lisp
(setq browse-url-browser-function 'browse-url-generic browse-url-generic-program "google-chrome-stable")
#+end_src
** Games
   Malyon: Text adventure interface, games located under =/games=
   #+begin_src emacs-lisp
   (use-package malyon)
   #+end_src
