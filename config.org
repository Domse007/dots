#+TITLE: Emacs Config - Jakob Klemm
#+AUTHOR: Jakob Klemm
#+EMAIL: jakob.klemm@protonmail.com
#+OPTIONS: toc:nil num:nil
* Installation
	1. Download fonts with =M-x all-the-icons-install-fonts=
	2. Install the fonts
* Setup
** =use-package=
  Verify the =use-package= installation and ensures the packages.
  #+begin_src emacs-lisp
	(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

	(require 'use-package)
	(setq use-package-always-ensure t)
  #+end_src
** Update and compile
  Update and compile all packages.
  #+begin_src emacs-lisp
  (use-package auto-compile
    :config (auto-compile-on-load-mode))
  (setq load-prefer-newer t)
  #+end_src
** Defaults
  Default settings cloned from [[https://github.com/hrs/sensible-defaults.el][Harry R. Schwartz]].
  Functions:
  - Ensuring that files end with newlines,
  - Always enabling syntax highlighting,
  - Increasing the garbage collection threshold,
  - Defaulting line-length to 80 characters,
  - Creating parent directories after saving a deeply nested file.
  #+begin_src emacs-lisp
  (load-file "~/.emacs.d/sensible-defaults.el/sensible-defaults.el")
  (sensible-defaults/use-all-settings)
  (sensible-defaults/use-all-keybindings)
  #+end_src
** Ressources
  Add =resources= to the path
  #+begin_src emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/resources/")
  #+end_src
* Interface
** Scrollbar
   Disable the scrollbar in the entire window and minibuffers.
   #+begin_src emacs-lisp
   ;; Menu bar
   (tool-bar-mode 0)
   (menu-bar-mode 0)
   (scroll-bar-mode -1)
   ;; Minibuffer
   (set-window-scroll-bars (minibuffer-window) nil nil)
   #+end_src
** Improvements
*** Symbols
   Use prettify symbols -> fancy lambdas
   #+begin_src emacs-lisp
   (global-prettify-symbols-mode t)
   #+end_src
*** Bottom line
   Use =moody= for a better bottom line.
   #+begin_src emacs-lisp
   (use-package moody
   :config
   (setq x-underline-at-descent-line t
        moody-mode-line-height 30)
	(moody-replace-mode-line-buffer-identification)
	(moody-replace-vc-mode))
   #+end_src
*** Minor modes
   Hide all minor modes with =minions=.
   #+begin_src emacs-lisp
   (use-package minions
   :config
   (setq minions-mode-line-lighter ""
   minions-mode-line-delimiters '("" . ""))
   (minions-mode 1))
   #+end_src
*** Scrolling
   Don't skip to center of page when at bottom / top, /normal/ smooth scrolling.
   #+begin_src emacs-lisp
   (setq scroll-conservatively 100)
   #+end_src
*** Fullscreen:
   #+begin_src emacs-lisp
   (add-to-list 'default-frame-alist '(fullscreen . maximized))
   #+end_src
*** Current line
    Hightlight the current line.
    #+begin_src emacs-lisp
    (global-hl-line-mode)
		;; Marked number
		(set-face-background hl-line-face "#090405")
    #+end_src
*** Line numbers
   #+begin_src emacs-lisp
    (global-display-line-numbers-mode)
   #+end_src
** Theme
   Load the elixify theme from Astonj with some modifications.
   #+begin_src emacs-lisp
   (add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")

   (load-theme `elixify t)
   #+end_src
** Dashboard
   Setup the dashboard with come modifications and configs.
   "Every time I see this package I think to myself "People exit Emacs?""
*** Dependancies
   Page-break-lines
   #+begin_src emacs-lisp
	 (use-package page-break-lines)
   (turn-on-page-break-lines-mode)
   #+end_src
   Icons
   #+begin_src emacs-lisp
   (use-package all-the-icons)
   #+end_src
*** Setup
    Setup the dashboard.
    #+begin_src emacs-lisp
    (use-package dashboard)
    (dashboard-setup-startup-hook)
    ;; Or if you use use-package
    (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook))
    #+end_src
*** Config
    Options and configuration for dashboard following the readme.
    #+begin_src emacs-lisp
    ;; Set the banner
    (setq dashboard-startup-banner 2)
    ;; Content is not centered by default. To center, set
    (setq dashboard-center-content t)
    ;; Icons
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    ;; Navigator
    (setq dashboard-set-navigator t)
    ;; Init info
    (setq dashboard-set-init-info t)
    ;; Message
    (setq dashboard-footer-messages '("Every time I see this package I think to myself \"People exit Emacs?\""))
    #+end_src
** Font
	 Use Fira Code as default font.
	 #+begin_src emacs-lisp
	 (set-face-attribute
	 'default nil
	 :font "Fira Code"
	 :weight 'normal
	 :width 'normal
	 )
	 #+end_src
** New window
	 Directly switch to new window after opening.
	 (Credit: hrs)
	 #+begin_src emacs-lisp
	 (defun hrs/split-window-below-and-switch ()
   "Split the window horizontally, then switch to the new pane."
   (interactive)
   (split-window-below)
   (balance-windows)
   (other-window 1))

	 (defun hrs/split-window-right-and-switch ()
   "Split the window vertically, then switch to the new pane."
   (interactive)
   (split-window-right)
   (balance-windows)
   (other-window 1))

	 ;; Keys
	 (global-set-key (kbd "C-x 2") 'hrs/split-window-below-and-switch)
	 (global-set-key (kbd "C-x 3") 'hrs/split-window-right-and-switch)
	 #+end_src
** Beacon
	 Beacon for highlighting the cursor when switching buffers.
	 #+begin_src emacs-lisp
	 (use-package beacon
   :custom
   (beacon-color "#c678dd")
   :hook (after-init . beacon-mode))
	 #+end_src
** Title
	 Set the window title to the current file.
	 #+begin_src emacs-lisp
	 (setq-default frame-title-format
   '(:eval
   (format "%s@%s: %s %s"
   (or (file-remote-p default-directory 'user)
   user-real-login-name)
   (or (file-remote-p default-directory 'host)
   system-name)
   (buffer-name)
   (cond
   (buffer-file-truename
   (concat "(" buffer-file-truename ")"))
   (dired-directory
   (concat "{" dired-directory "}"))
   (t
   "[no file]")))))
	 #+end_src
** Tabs
	 List buffers like tabs.
	 #+begin_src emacs-lisp
	 (use-package centaur-tabs)
	 (centaur-tabs-mode t)
	 (global-set-key (kbd "C-x x")  'centaur-tabs-backward)
	 (global-set-key (kbd "C-x c") 'centaur-tabs-forward)
	 (global-set-key (kbd "C-x y") 'centaur-tabs-toggle-groups)

	 (setq centaur-tabs-style "bar")
	 (setq centaur-tabs-set-icons t)
	 (setq centaur-tabs-height 32)
	 (setq centaur-tabs-set-bar 'left)

	 (setq centaur-tabs-set-icons t)
	 (setq centaur-tabs-plain-icons t)
   #+end_src
	 Exclude certain buffers from centaur.
	 #+begin_src emacs-lisp
	 (defun centaur-tabs-hide-tab (x)
   (let ((name (format "%s" x)))
	 (or
	 (string-prefix-p "*dashboard*" name)
	 (string-prefix-p "*scratch*" name)
	 (string-prefix-p "*Messages*" name)
	 (string-prefix-p "*Completions*" name)
	 (string-prefix-p "*Org PDF LaTeX Output*" name)
	 (and (string-prefix-p "magit" name)
	 (not (file-name-extension name)))
	 )))
	#+end_src
	 Tab Grouping
 	#+begin_src emacs-lisp
	;; Show groups
	(setq centaur-tabs--buffer-show-groups t)
	(centaur-tabs-group-by-projectile-project)

	(defun centaur-tabs-buffer-groups ()
	"`centaur-tabs-buffer-groups' control buffers' group rules.
	Group centaur-tabs with mode if buffer is derived from `eshell-mode' `emacs-lisp-mode' `dired-mode' `org-mode' `magit-mode'.
	All buffer name start with * will group to \"Emacs\".
	Other buffer group by `centaur-tabs-get-group-name' with project name."
	(list
	(cond
	((or (string-equal "*" (substring (buffer-name) 0 1))
				(memq major-mode '(magit-process-mode
				 magit-status-mode
				 magit-diff-mode
				 magit-log-mode
				 magit-file-mode
				 magit-blob-mode
				 magit-blame-mode
				 )))
				 "Emacs")
	 ((derived-mode-p 'prog-mode)
	 "Editing")
	 ((derived-mode-p 'dired-mode)
	 "Dired")
	 ((memq major-mode '(helpful-mode
					 help-mode))
					 "Help")
	 ((memq major-mode '(org-mode
					 org-agenda-clockreport-mode
					 org-src-mode
					 org-agenda-mode
					 org-beamer-mode
					 org-indent-mode
					 org-bullets-mode
					 org-cdlatex-mode
					 org-agenda-log-mode
					 diary-mode))
					 "OrgMode")
	 (t
	 (centaur-tabs-get-group-name (current-buffer))))))
	#+end_src
* Projects
** General
*** Indentation
    Show tabs as 2 wide.
    #+begin_src emacs-lisp
    (setq-default tab-width 2)
    #+end_src
*** CamelCase
    Treat camel casing (the best and only right variable naming system) as multiple words.
    #+begin_src emacs-lisp
    (use-package subword
    :config (global-subword-mode 1))
    #+end_src
*** UTF-8
    Treat every file as UTF-8 by default.
    #+begin_src emacs-lisp
    (set-language-environment "UTF-8")
    #+end_src
*** Wrap
		Auto wrap paragraphs. Or use =M-q=.
    #+begin_src emacs-lisp
		(add-hook 'text-mode-hook 'auto-fill-mode)
		(add-hook 'gfm-mode-hook 'auto-fill-mode)
		(add-hook 'org-mode-hook 'auto-fill-mode)
    #+end_src
*** Spacing
		Cycle spacing options.
		#+begin_src emacs-lisp
		(global-set-key (kbd "M-SPC") 'cycle-spacing)
		#+end_src
*** Modes
		Other /cool/ default modes.
		#+begin_src emacs-lisp
		(show-paren-mode 1)
		(column-number-mode 1)
		(size-indication-mode 1)
		(transient-mark-mode 1)
		(delete-selection-mode 1)
    #+end_src
*** Kill current
		Kill the current buffer instead of asking.
		#+begin_src emacs-lisp
		(defun kill-current-buffer ()
    (interactive)
    (kill-buffer (current-buffer)))

		;; Keybind
		(global-set-key (kbd "C-x k") 'kill-current-buffer)
		#+end_src
*** Save
		Save the location within a file.
		#+begin_src emacs-lisp
		(save-place-mode t)
		#+end_src
*** Which key
		Helpful with long keybinds.
		#+begin_src emacs-lisp
		(use-package which-key
		:config (which-key-mode))
		#+end_src
*** Jump
		Jump to function definitions.
		(Works with elixir)
		#+begin_src emacs-lisp
		(use-package dumb-jump
		:bind (("M-g o" . dumb-jump-go-other-window)
    ("M-g j" . dumb-jump-go)
    ("M-g b" . dumb-jump-back)
    ("M-g i" . dumb-jump-go-prompt)
    ("M-g x" . dumb-jump-go-prefer-external)
    ("M-g z" . dumb-jump-go-prefer-external-other-window))
		:config (setq dumb-jump-selector 'ivy)
		:ensure)
	#+end_src
*** google-this
		Automaticly google something.
		#+begin_src emacs-lisp
		(use-package google-this)
		(google-this-mode 1)
		(global-set-key (kbd "C-c t") 'google-this)
		#+end_src
*** Terminal
		Bind =C-x t= to =eshell=.
		#+begin_src emacs-lisp
		(global-set-key (kbd "C-x t") 'eshell)
		#+end_src
** Completion
   #+begin_src emacs-lisp
   (use-package lsp-mode
   :commands lsp
   :ensure t
   :diminish lsp-mode
   :hook
   (elixir-mode . lsp)
   :init
   (add-to-list 'exec-path "~/.emacs.d/elixir-ls"))
   #+end_src
	 Flycheck mode.
	 #+begin_src emacs-lisp
	 (global-flycheck-mode)
	 #+end_src
** Ivy - Swiper
	 #+begin_src emacs-lisp
	 (use-package ivy)
	 (ivy-mode 1)
	 (setq ivy-use-virtual-buffers t)
	 (setq enable-recursive-minibuffers t)
	 ;; enable this if you want `swiper' to use it
	 (setq search-default-mode #'char-fold-to-regexp)
	 (global-set-key "\C-s" 'swiper)
	 #+end_src
** Management
   Projectile for project management.
   #+begin_src emacs-lisp
	 (use-package projectile)
   (projectile-mode +1)
   (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
   #+end_src
** Ido
	 Globaly enable IDO mode
	 #+begin_src emacs-lisp
	 (setq ido-enable-flex-matching t)
	 (setq ido-everywhere t)
	 (ido-mode 1)
	 (setq ido-use-filename-at-point 'guess)
	 (setq ido-create-new-buffer 'always)
	 (setq ido-file-extensions-order '(".ex" ".exs" ".org" ".md" ".txt" ".py" ".emacs" ".xml" ".el" ".ini" ".cfg" ".cnf"))
	 #+end_src
*** Smex
		Ido for Mx
		#+begin_src emacs-lisp
		(use-package smex)
		(smex-initialize)

		(global-set-key (kbd "M-x") 'smex)
		(global-set-key (kbd "M-X") 'smex-major-mode-commands)
		(global-set-key (kbd "C-c C-x m") 'execute-extended-command)
		#+end_src
** Magit
	 Magit keybinds.
	 #+begin_src emacs-lisp
	 (use-package magit)
	 (global-set-key (kbd "C-x g") 'magit-status)
	 (global-set-key (kbd "C-x p") 'magit-init)
	 #+end_src
* Programming
** Elixir
   Elixir major mode with synatx highlighting etc.
   #+begin_src emacs-lisp
   (unless (package-installed-p 'elixir-mode)
   (package-install 'elixir-mode))
  #+end_src
  Commands:\\
  Use
  \[M-x elixir-format\]
  to format the document following mix styleguide.
** Webmode
   Web mode and enable rainbow mode for hex colors.
   #+begin_src emacs-lisp
   (use-package web-mode)
   (add-hook 'web-mode-hook
   (lambda ()
   (rainbow-mode)
   (rspec-mode)
   (setq web-mode-markup-indent-offset 2)))
   #+end_src
** Golang
   Golang major mode.
   #+begin_src emacs-lisp
   (use-package go-mode)
   (use-package go-errcheck)
   #+end_src
** JavaScript
   JavaScript major mode.
   #+begin_src emacs-lisp
   (use-package coffee-mode)
   #+end_src
** Rust
   Rust major mode.
   #+begin_src emacs-lisp
   (use-package rust-mode)
   #+end_src
** Scala
   Scala major mode.
   #+begin_src emacs-lisp
   (use-package scala-mode
   :interpreter
   ("scala" . scala-mode))
   (use-package sbt-mode)
   #+end_src
** Markdown
	 Github markdown.
	 #+begin_src emacs-lisp
   (use-package markdown-mode
   :commands gfm-mode
   :mode (("\\.md$" . gfm-mode))
   :config
   (setq markdown-command "pandoc --standalone --mathjax --from=markdown")
   (custom-set-faces
   '(markdown-code-face ((t nil)))))
   #+end_src
* Org-mode
** Bullets
   Use org-bulltes whenever possible.
   #+begin_src emacs-lisp
   (use-package org-bullets
   :init
   (add-hook 'org-mode-hook 'org-bullets-mode))
   #+end_src
** Folded
   Instead of "..." show a downward pointing arrow at the end of title.
	 TODO Change symbol or something.
   #+begin_src emacs-lisp
   (setq org-ellipsis "☭")
   #+end_src
** Codeblock
	 Higlight the entire code block when editing.
	 #+begin_src emacs-lisp
	 (setq org-src-fontify-natively t)
	 #+end_src
** Todos
	 (copied from hrs/config)
*** Location
		Org document storage location for archive and other documents.
		#+begin_src emacs-lisp
		(setq org-directory "~/documents/org")

		(defun org-file-path (filename)
		"Return the absolute address of an org file, given its relative name."
		(concat (file-name-as-directory org-directory) filename))

		(setq org-index-file (org-file-path "~/emacs/main.org"))
		(setq org-archive-location
    (concat (org-file-path "archive.org") "::* From %s"))
		#+end_src
*** Archive
	 Hitting =C-c C-x C-s= will mark a todo as done and move it to an appropriate
	 place in the archive.
   #+begin_src emacs-lisp
   (defun hrs/mark-done-and-archive ()
   "Mark the state of an org-mode item as DONE and archive it."
   (interactive)
   (org-todo 'done)
   (org-archive-subtree))
   ;; Shortcut to archive
   (define-key org-mode-map (kbd "C-c C-x C-s") 'hrs/mark-done-and-archive)
   #+end_src
*** Time
	 Record the time that a todo was archived.
   #+begin_src emacs-lisp
   (setq org-log-done 'time)
   #+end_src
*** Check
	 Ensure that a task can't be marked as done if it contains unfinished subtasks
	 or checklist items. This is handy for organizing "blocking" tasks
	 hierarchically.
   #+begin_src emacs-lisp
   (setq org-enforce-todo-dependencies t)
   (setq org-enforce-todo-checkbox-dependencies t)
   #+end_src
*** Stats
	 Add new states to the todo cycle to extend the basic TODO and DONE states that
	 org mode normally provides.
   #+begin_src emacs-lisp
	 (setq org-todo-keywords
   '((sequence "TODO" "SEARCH" "PROGRESS" "BLOCKED" "|" "DONE" "PAL")))
   #+end_src
** Export
	 Allow export to markdown and beamer (for presentations).
   #+begin_src emacs-lisp
   ;; (use-package ox-md)
   ;; (use-package ox-beamer)
	 ;; Add odt
	 (eval-after-load "org" '(require 'ox-odt nil t))
   #+end_src
*** Code
		Allow =babel= to evaluate Emacs lisp, Ruby, dot, or Gnuplot code.
    #+begin_src emacs-lisp
		(use-package ob-go)
		(use-package ob-elixir)

		(use-package gnuplot)
		(org-babel-do-load-languages
		'org-babel-load-languages
		'((emacs-lisp . t)
		(ruby . t)
		(dot . t)
		(gnuplot . t)
		(python . t)
		(go . t)
		(sql . t)
		(elixir . t)
		))
    #+end_src
		Don't ask before evaluating code blocks.
    #+BEGIN_src emacs-lisp
		(setq org-confirm-babel-evaluate nil)
    #+end_src
*** HTML
		Disable footer.
    #+begin_src emacs-lisp
		(setq org-html-postamble nil)
    #+end_src
** Tex
*** Parse
		Parse file after loading it.
    #+begin_src emacs-lisp
		(setq TeX-parse-self t)
    #+end_src
*** PDF-Latex
    #+begin_src emacs-lisp
		(setq TeX-PDF-mode t)
    #+end_src
*** Math mode
    #+begin_src emacs-lisp
		(add-hook 'LaTeX-mode-hook
		(lambda ()
		(LaTeX-math-mode)
		(setq TeX-master t)))
    #+end_src
