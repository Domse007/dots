;; Productivity

;; Capture templates
(setq org-capture-templates
      '(
        ("t" "Todo" entry (file "~/supervisor/inbox.org")
         "* TODO %?\n%T\n%a")
        ("i" "Idea" entry (file "~/supervisor/ideas.org")
         "* %?\n%T\n%a")
        ("e" "Event" entry (file "~/supervisor/events.org")
         "* STATIC %?\n%T\n%a")
        ("r" "Reference" entry (function get-file)
         "* %? \n
%T\n%a"
         )
        )
      )
(add-hook 'org-capture-mode-hook 'jk/toggle-mode)
(defun jk/toggle-mode ()
  (interactive)
  (setq modalka-mode nil)
  (evil-insert-state)
  )

;; Reference system
(defun get-file ()
  (find-file (format "~/documents/files/references/%s.org" (format-time-string "%Y-%m-%d-%H:%M:%S")))
  )
(defun jk/search-references ()
  (interactive)
  (let ((search (read-from-minibuffer "Search for: ")))
    (rg search "*.org" "~/documents/files/references/")
    )
  )

;; Links
(require 'org-mouse)
(defun jk/open-office-email ()
  (interactive)
  (shell-command "brave https://outlook.office.com/mail/")
  )
(defun jk/open-local-email ()
  (interactive)
  (org-toggle-checkbox)
  (mu4e)
  )
(defun jk/open-downloads-folder ()
  (interactive)
  (shell-command "dolphin ~/Downloads/")
  )
(defun jk/open-workspace-folder ()
  (interactive)
  (org-toggle-checkbox)
  (shell-command "dolphin ~/workspace/")
  )
(defun jk/open-projects-file ()
  (interactive)
  (org-toggle-checkbox)
  (find-file jk/projects-file)
  )
(defun jk/agenda ()
  (interactive)
  (org-toggle-checkbox)
  (org-agenda "n")
  )
(defun jk/push-to-server ()
  (interactive)
  (message "Not implemented!")
  )
;; Todos
(setq org-todo-keywords
      '((sequence "TODO(t)" "NEXT(p)" "WAITING(w)" "STATIC(s)" "|" "DONE(d)" "SEP(e)"))
      org-todo-keyword-faces '(("TODO" . (:foreground "#af1212" :weight bold))
                               ("NEXT" . (:foreground "#A0FF9F" :weight bold))
                               ("WAITING" . (:foreground "#990099" :weight bold))
                               ("STATIC" . (:foreground "#B26722" :weight bold))
                               ("DONE" . (:foreground "#ffffff" :weight bold))
                               ("SEP" . (:foreground "#474A44" :weight bold))
                               )
      )

;; Refile
;; https://emacs.stackexchange.com/questions/8045/org-refile-to-a-known-fixed-location
(defun jk/refile-to (file headline)
  "Move current headline to specified location"
  (let ((pos (save-excursion
               (find-file file)
               (org-find-exact-headline-in-buffer headline))))
    (org-refile nil nil (list headline file nil pos))))
(defun jk/refile-to-project ()
  (interactive)
  (jk/parse-projects-file)
  (let ((selection
         (completing-read "Project: " jk/projects nil t)))
    (org-mark-ring-push)
    (jk/refile-to jk/projects-file selection)
    (org-mark-ring-goto)))
(defun jk/refile-to-events ()
  (interactive)
  (org-mark-ring-push)
  (jk/refile-to jk/events-file "")
  (org-mark-ring-goto))
(defun jk/refile-to-quotes ()
  (interactive)
  (org-mark-ring-push)
  (jk/refile-to jk/quotes-file "")
  (org-mark-ring-goto))
(defun jk/refile-to-ideas ()
  (interactive)
  (org-mark-ring-push)
  (jk/refile-to jk/ideas-file "")
  (org-mark-ring-goto))
(defun jk/refile-to-active-tasks ()
  (interactive)
  (org-mark-ring-push)
  (jk/refile-to jk/active-file "Tasks")
  (org-mark-ring-goto))
(defun jk/refile-to-active-tasks ()
  (interactive)
  (org-mark-ring-push)
  (jk/refile-to jk/active-file "Events")
  (org-mark-ring-goto))

;; Active
(defun jk/generate-template ()
  (interactive)
  )
(defun jk/store-active ()
  (interactive)
  (let ((date (format "~/documents/completed/%s.org" (format-time-string "%F"))))
    (with-temp-buffer
      (insert-file-contents "~/supervisor/active.org")
      (write-region nil nil date)
      )
    )
  )
(defun jk/generate-active ()
  (interactive)
  (let* ((content '())
         (habit-base "~/documents/templates/habits/%s")
         (action-base "~/documents/templates/actions/%s")
         (habit-path (if (file-exists-p (format habit-base (format-time-string "%u")))
                         (format habit-base (format-time-string "%u"))
                       (format habit-base "default")))
         (action-path (if (file-exists-p (format action-base (format-time-string "%u")))
                          (format action-base (format-time-string "%u"))
                        (format action-base "default")))
         )
    (push (with-temp-buffer
            (insert-file-contents habit-path)
            (buffer-string))
          content)
    (push (with-temp-buffer
            (insert-file-contents action-path)
            (buffer-string))
          content)
    (push (with-temp-buffer
            (insert-file-contents "~/documents/templates/generic.org")
            (buffer-string))
          content)
    (write-region (mapconcat #'identity content "") nil jk/active-file)
    )
  (if (get-buffer "active.org")
      (switch-to-buffer "active.org")
    (find-file jk/active-file)
    )
  )

(defun jk/capture-reference ()
  (interactive)
  (setcar(reverse org-capture-templates) '("r" "RAFJKAFJ"))
  (setq org-capture-templates (reverse org-capture-templates))
  )

;; Utilities
;; Execute code in org with [[elisp:(jk/test-function)][name]]

(global-auto-revert-mode t)
(setq auto-revert-use-notify nil)
(setq org-startup-folded nil)

;; (add-to-list 'org-agenda-bulk-custom-functions '(?R jk/bulk-refile))
;; ;; Cloned from org-agenda.el
;; (defun jk/bulk-refile (&optional arg)
;;   (interactive "P")
;;   (if (not org-agenda-bulk-marked-entries)
;;       (save-excursion (org-agenda-bulk-mark)))
;;   (dolist (m org-agenda-bulk-marked-entries)
;;     (unless (and (markerp m)
;; 		         (marker-buffer m)
;; 		         (buffer-live-p (marker-buffer m))
;; 		         (marker-position m))
;;       (user-error "Marker %s for bulk command is invalid" m)))

;;   (setq cmd (lambda () (jk/refile-to-active-tasks)))
;;   (setq redo-at-end t)

;;   (dolist (e entries)
;; 	(let ((pos (text-property-any (point-min) (point-max) 'org-hd-marker e)))
;; 	  (if (not pos)
;; 		  (progn (message "Skipping removed entry at %s" e)
;; 		         (cl-incf skipped))
;; 	    (goto-char pos)
;; 	    (let (org-loop-over-headlines-in-active-region) (funcall cmd))
;; 	    ;; `post-command-hook' is not run yet.  We make sure any
;; 	    ;; pending log note is processed.
;; 	    (when org-log-setup (org-add-log-note))
;; 	    (cl-incf processed))))
;;   (when redo-at-end (org-agenda-redo))
;;   (unless org-agenda-persistent-marks (org-agenda-bulk-unmark-all))
;;   )

(setq org-refile-targets '(("~/supervisor/active.org" :maxlevel . 1)))
(setq org-link-elisp-skip-confirm-regexp "jk")
(setq org-reverse-note-order t)

(setq jk/projects '(""))
(setq jk/projects-file "~/supervisor/projects.org")
(setq jk/ideas-file "~/supervisor/ideas.org")
(setq jk/quotes-file "~/supervisor/quotes.org")
(setq jk/events-file "~/supervisor/events.org")
(setq jk/active-file "~/supervisor/active.org")
(setq jk/inbox-file "~/supervisor/inbox.org")

;; Warning: elisp sucks and returning things from fuctions is
;; impossible. this is not a /nice/ solution but it works.
;; This requires
(defun jk/parse-projects-file ()
  (with-temp-buffer
    (insert-file-contents jk/projects-file)
    (jk/parse-projects-buffer)))

(defun jk/parse-projects-buffer ()
  (interactive)
  (org-element-map (org-element-parse-buffer) 'headline
    (lambda (hl)
      (if (= (org-element-property :level hl) 1)
          (push (format "%s" (org-element-property :raw-value hl)) jk/projects)
        ))))

(defun jk/parse-test ()
  (interactive)
  (with-temp-buffer
    (insert-file-contents "~/supervisor/projects.org")
    (org-element-map (org-element-parse-buffer) 'headline
      (lambda (hl)
        (if (= (org-element-property :level hl) 4)
            (message (format "%s" (org-element-property hl "id")))
          )
        )
      )
    )
  )

(defun jk/refile-with-id (file headline)
  (save-excursion
    (let ((pos (save-excursion
                 (find-file file)
                 (org-find-exact-headline-in-buffer headline))))
      (org-with-point-at pos
        (let (
              (id (org-entry-get nil "ID"))
              (org-refile-keep t)
              )
          (org-refile nil nil (list headline file nil pos) (format "%s" id))
          (org-entry-put pos "ID" "PLACEHOLDER")
          (org-id-add-location id file)
          (let (
                (pom (org-find-entry-with-id id))
                (new (format "%s-Z" id))
                )
            (save-excursion
              (if (get-buffer "target.org")
                  (switch-to-buffer "target.org")
                (find-file file)
                )
              (org-entry-put pom "ID" new)
              )
            (org-entry-put pos "ID" id)
            (org-id-add-location new file)
            (org-id-add-location id "~/supervisor/test.org")
            )
          )))))

(defun jk/linked-todo (keyword)
  (org-todo keyword)
  (save-excursion
    (let* (
           (pos (point-marker))
           (zid (org-entry-get pos "ID"))
           (id (jk/parse-id zid))
           (pos (org-id-find id))
           )
      (save-excursion
        (jk/find-buffer-or-file pos)
        (org-todo keyword)
        (save-buffer)
        )
      )
    )
  (save-buffer)
  )

(defun jk/linked-update ()
  (interactive)
  (save-excursion
    (let* (
           (pos (point-marker))
           (todo (org-entry-get pos "TODO"))
           (sched (org-entry-get pos "SCHEDULED"))
           (dead (org-entry-get pos "DEADLINE"))
           (tags (org-entry-get pos "TAGS"))
           (head (nth 4 (org-heading-components)))
           (zid (org-entry-get pos "ID"))
           (id (jk/parse-id zid))
           (pos (org-id-find id))
           )
      (save-excursion
        (let ((file (car (reverse (s-split "/" (car pos))))))
          (if (get-buffer file)
              (switch-to-buffer file)
            (find-file (car name))
            )
          )
        (goto-char (cdr pos))
        (org-edit-headline head)
        (org-todo todo)
        (org--deadline-or-schedue nil 'schedule sched)
        (org--deadline-or-schedue nil 'deadline dead)
        (org-set-tags tags)
        )
      )
    )
  )

(defun jk/linked-set-done ()
  (interactive)
  (jk/linked-todo "DONE")
  )

(defun jk/linked-set-next ()
  (interactive)
  (jk/linked-todo "NEXT")
  )

(defun jk/linked-set-todo ()
  (interactive)
  (jk/linked-todo "TODO")
  )

(defun jk/marker-test ()
  (interactive)
  (save-excursion
    (let ((pos (org-id-goto "9a6319cb-cf6e-48bb-8036-a9e0a3848b88")))
      (message (format "%s" pos))
      )
    )
  )

(defun jk/parse-id (id)
  (let* (
         (items (s-split "-" id))
         (filtered '())
         )
    (dolist (i items)
      (if (not (= (length i) 1))
          (push i filtered)
        )
      )
    (s-join "-" (reverse filtered))
    )
  )

(defun jk/find-buffer-or-file (name)
  "name = (path . pos)"
  (let ((file (car (reverse (s-split "/" (car name))))))
    (if (get-buffer file)
        (switch-to-buffer file)
      (find-file (car name))
      )
    )
  )

(defun jk/refile-to-test ()
  (interactive)
  (org-mark-ring-push)
  (jk/refile-with-id "~/supervisor/target.org" "")
  (org-mark-ring-goto))
