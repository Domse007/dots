;; Productivity

;; Capture templates
(setq org-id-link-to-org-use-id t)
(setq org-capture-templates
      '(
        ("i" "Inbox" entry (file "~/supervisor/inbox.org")
         "* TODO %?\n%T\n%a")
        ("i" "Idea" entry (file "~/supervisor/ideas.org")
         "* %?\n%T\n%a")
        ("r" "Reference" entry (function get-file)
         "* %? \n\n%T\n%a"
         )
        ("p" "Project" entry (function get-project)
         "* TODO %? \n%T\n%a"
         )
        )
      )
(add-hook 'org-capture-mode-hook 'jk/toggle-mode)
(defun jk/toggle-mode ()
  (interactive)
  (setq modalka-mode nil)
  (evil-insert-state)
  )
(defun get-file ()
  (find-file (format "~/documents/files/references/%s.org" (format-time-string "%Y-%m-%d-%H:%M:%S")))
  )
(defun get-project ()
  (let* (
         (selection (jk/select-project))
         (file (format "~/supervisor/%s" selection))
         (activity (jk/select-activity file))
         )
    (find-file file)
    (if (eq activity "")
        (goto-char (point-max))
      (goto-char (org-find-exact-headline-in-buffer activity))
      )
    )
  )

;; References
(use-package rg
  :defer t
  )
(defun jk/search-references ()
  (interactive)
  (let ((search (read-from-minibuffer "Search for: ")))
    (rg search "*.org" "~/documents/files/references/")
    )
  )

;; Links
(require 'org-mouse)
(add-to-list 'org-modules 'org-mouse t)
(defun jk/open-office-email ()
  (interactive)
  (shell-command "brave https://outlook.office.com/mail/")
  )
(defun jk/open-local-email ()
  (interactive)
  (org-toggle-checkbox)
  (mu4e)
  )
(defun jk/open-downloads-folder ()
  (interactive)
  (shell-command "dolphin ~/Downloads/")
  )
(defun jk/open-workspace-folder ()
  (interactive)
  (org-toggle-checkbox)
  (shell-command "dolphin ~/workspace/")
  )
(defun jk/open-projects-file ()
  (interactive)
  (org-toggle-checkbox)
  (find-file jk/projects-file)
  )
(defun jk/agenda ()
  (interactive)
  (org-toggle-checkbox)
  (org-agenda "n")
  )

;; Files
(defun jk/active-file ()
  (interactive)
  (find-file "~/supervisor/active.org")
  )
(defun jk/project-file ()
  (interactive)
  (let* (
         (selection (jk/select-project))
         (file (format "~/supervisor/%s" selection))
         )
    (find-file file)
    )
  )
(defun jk/ideas-file ()
  (interactive)
  (find-file "~/supervisor/ideas.org")
  )

;; Todos
(setq org-todo-keywords
      '((sequence "TODO(t)" "NEXT(p)" "WAITING(w)" "|" "DONE(d)" "SEP(e)"))
      org-todo-keyword-faces '(("TODO" . (:foreground "#af1212" :weight bold))
                               ("NEXT" . (:foreground "#A0FF9F" :weight bold))
                               ("WAITING" . (:foreground "#990099" :weight bold))
                               ("DONE" . (:foreground "#ffffff" :weight bold))
                               ("SEP" . (:foreground "#474A44" :weight bold))
                               )
      )

;; Checklists
(defun jk/insert-checklist ()
  (interactive)
  (insert-file-contents (read-file-name "Select template:" "~/documents/templates/actions"))
  )

;; Refile
;; https://emacs.stackexchange.com/questions/8045/org-refile-to-a-known-fixed-location
(defun jk/refile-to (file headline)
  "Move current headline to specified location"
  (let ((pos (save-excursion
               (find-file file)
               (org-find-exact-headline-in-buffer headline))))
    (org-refile nil nil (list headline file nil pos))))
(defun jk/refile-to-project ()
  (interactive)
  (org-id-get-create)
  (jk/all-projects)
  (let* (
         (selection (jk/select-project))
         (file (format "~/supervisor/%s" selection))
         (activity (jk/select-activity file))
         )
    (org-mark-ring-push)
    (jk/refile-to file activity)
    (save-buffer)
    (org-mark-ring-goto)))
(defun jk/refile-to-ideas ()
  (interactive)
  (org-id-get-create)
  (org-mark-ring-push)
  (jk/refile-to jk/ideas-file "")
  (org-mark-ring-goto))
(defun jk/refile-to-reference ()
  (interactive)
  (org-id-get-create)
  (org-mark-ring-push)
  (jk/refile-to (format "~/documents/files/references/%s.org" (format-time-string "%Y-%m-%d-%H:%M:%S")) "")
  (org-mark-ring-goto))

;; Active
(defun jk/active ()
  (interactive)
  (org-toggle-checkbox)
  (save-buffer)
  (jk/store-active)
  (jk/generate-active)
  (revert-buffer nil t nil)
  )
(defun jk/store-active ()
  (let ((date (format "~/documents/files/completed/%s.org" (format-time-string "%F"))))
    (with-temp-buffer
      (insert-file-contents "~/supervisor/active.org")
      (write-region nil nil date)
      )
    )
  )
(defun jk/generate-active ()
  (let* ((content '())
         (habit-base "~/documents/templates/habits/%s")
         (action-base "~/documents/templates/actions/%s")
         (habit-path (if (file-exists-p (format habit-base (format-time-string "%u")))
                         (format habit-base (format-time-string "%u"))
                       (format habit-base "default")))
         (action-path (if (file-exists-p (format action-base (format-time-string "%u")))
                          (format action-base (format-time-string "%u"))
                        (format action-base "default")))
         )
    (push (with-temp-buffer
            (insert-file-contents habit-path)
            (buffer-string))
          content)
    (push (with-temp-buffer
            (insert-file-contents action-path)
            (buffer-string))
          content)
    (push (with-temp-buffer
            (insert-file-contents "~/documents/templates/generic.org")
            (buffer-string))
          content)
    (write-region (mapconcat #'identity content "") nil jk/active-file)
    )
  (if (get-buffer "active.org")
      (switch-to-buffer "active.org")
    (find-file jk/active-file)
    )
  )

(defun jk/activate ()
  (interactive)
  (save-window-excursion
    (let* (
           (start (point-marker))
           (headline (nth 4 (org-heading-components)))
           (pos (save-excursion
                  (find-file "~/supervisor/active.org")
                  (org-find-exact-headline-in-buffer "Tasks")))
           (id (org-entry-get nil "ID"))
           (parent (jk/get-parent-name))
           (org-refile-keep t)
           )
      (org-refile nil nil (list "Tasks" "~/supervisor/active.org" nil pos))
      (org-entry-put start "ID" "PLACEHOLDER")
      (let (
            (pom (save-excursion
                   (find-file "~/supervisor/active.org")
                   (org-find-exact-headline-in-buffer headline)
                   ))
            (new (format "%s-Z" id))
            )
        (save-excursion
          (if (get-buffer "active.org")
              (switch-to-buffer "active.org")
            (find-file "~/supervisor/active.org")
            )
          (org-entry-put pom "ID" new)
          (org-entry-put pom "PARENT" (format "%s" parent))
          (goto-char pom)
          (org-todo "TODO")
          (save-buffer)
          )
        (org-entry-put start "ID" id)
        (org-id-add-location new "~/supervisor/active.org")
        (org-id-add-location id (buffer-file-name))
        (org-id-locations-save)
        (save-buffer)
        )
      )
    )
  )

(defun jk/linked-done ()
  (interactive)
  (org-todo "DONE")
  (save-window-excursion
    (let* (
           (pos (point-marker))
           (zid (org-entry-get pos "ID"))
           (id (jk/parse-id zid))
           (pos (org-id-find id))
           )
      (if (not (eq pos nil))
          (save-window-excursion
            (jk/find-buffer-or-file pos)
            (goto-char (cdr pos))
            (org-todo "DONE")
            (save-buffer)
            )
        )
      )
    )
  (save-buffer)
  )

;; Utilities
(global-auto-revert-mode t)
(setq auto-revert-use-notify nil)
;; (setq org-startup-folded nil)

(add-hook 'org-agenda-mode-hook
          (lambda ()
            (add-hook 'auto-save-hook 'org-save-all-org-buffers nil t)
            (auto-save-mode)))

(setq org-link-elisp-skip-confirm-regexp "jk")
(setq org-reverse-note-order t)

(setq jk/projects '(""))
(setq jk/activities '(""))
(setq jk/base-dir "~/supervisor")
(setq jk/base-files '("inbox.org" "active.org" "ideas.org" ".stfolder" "." ".."))
(setq jk/projects-file "~/supervisor/projects.org")
(setq jk/ideas-file "~/supervisor/ideas.org")
(setq jk/quotes-file "~/supervisor/quotes.org")
(setq jk/active-file "~/supervisor/active.org")
(setq jk/inbox-file "~/supervisor/inbox.org")

(defun jk/all-projects ()
  (setq jk/projects '(""))
  (let (
        (all (directory-files jk/base-dir))
        )
    (dolist (f all)
      (if (not (member f jk/base-files))
          (push f jk/projects)
        )
      )
    )
  )
(defun jk/select-project ()
  (jk/all-projects)
  (completing-read "Project: " jk/projects nil t)
  )
(defun jk/select-activity (path)
  (save-excursion
    (find-file path)
    (jk/parse-project)
    (completing-read "Activity: " jk/activities nil t)
    )
  )
(defun jk/parse-project ()
  (interactive)
  (setq jk/activities '(""))
  (org-element-map (org-element-parse-buffer) 'headline
    (lambda (hl)
      (if (= (org-element-property :level hl) 1)
          (push (format "%s" (org-element-property :raw-value hl)) jk/activities)
        )))
  )

(defun jk/parse-id (id)
  (let* (
         (items (s-split "-" id))
         (filtered '())
         )
    (dolist (i items)
      (if (not (= (length i) 1))
          (push i filtered)
        )
      )
    (s-join "-" (reverse filtered))
    )
  )

(defun jk/find-buffer-or-file (name)
  "name = (path . pos)"
  (let ((file (car (reverse (s-split "/" (car name))))))
    (if (get-buffer file)
        (switch-to-buffer file)
      (find-file (car name))
      )
    )
  )

(defun jk/get-parent-name ()
  (interactive)
  (let* ((headline (nth 4 (org-heading-components)))
         )
    (org-element-map (org-element-parse-buffer) 'headline
      (lambda (hl)
        (if (and (< (org-element-property :begin hl) (point)) (> (org-element-property :end hl) (point)))
            (org-element-property :raw-value (org-element-property :parent hl))
          )))
    )
  )
