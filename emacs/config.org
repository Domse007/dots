#+TITLE: Jakob Klemm - Emacs
#+AUTHOR: Jakob Klemm

* Setup
Base settings & setup.
** Packages
Setup =use-package= and quelpa, since =straight= is most likely still
broken.
#+begin_src emacs-lisp
  (require 'package) ;; Emacs builtin

  ;; set package.el repositories
  (setq package-archives
        '(
          ("org" . "https://orgmode.org/elpa/")
          ("gnu" . "https://elpa.gnu.org/packages/")
          ("melpa" . "https://melpa.org/packages/")
          ))

  ;; initialize built-in package management
  (package-initialize)

  (unless package-archive-contents    ;; Refresh the packages descriptions
    (package-refresh-contents))
  (setq package-load-list '(all))     ;; List of packages to load
  (unless (package-installed-p 'org)  ;; Make sure the Org package is
    (package-install 'org)) 

  ;; Org clocking issues
  (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)

  ;; update packages list if we are on a new install
  (unless package-archive-contents
    (package-refresh-contents))

  ;; a list of pkgs to programmatically install
  ;; ensure installed via package.el
  (setq my-package-list '(use-package))

  ;; programmatically install/ensure installed
  ;; pkgs in your personal list
  (dolist (package my-package-list)
    (unless (package-installed-p package)
      (package-install package)))

  (use-package quelpa-use-package
    :ensure t
    )
#+end_src
** Straight
Some packages require straight but using it normally doesn't work
since it's a package manager that doesn't reliably install packages.
Proceed with caution!
#+begin_src emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+end_src
** Defaults
Some default settings, partially copied from Harry R. Schwartz.
#+begin_src emacs-lisp
  (setq gc-cons-threshold 2000000000000)

  ;; Treat CamelCaseSubWords as separate words in every programming
  ;; mode.
  (add-hook 'prog-mode-hook 'subword-mode)

  ;; Don't assume that sentences should have two spaces after
  ;; periods.
  (setq sentence-end-double-space nil)

  ;; Turn on transient-mark-mode.
  (transient-mark-mode t)

  ;; Auto wrap text
  (auto-fill-mode t)

  ;; selected text and start inserting your typed text.
  (delete-selection-mode t)

  ;; If you save a file that doesn't end with a newline, automatically
  ;; append one.
  (setq require-final-newline t)

  ;; Visually indicate matching pairs of parentheses.
  (show-paren-mode t)
  (setq show-paren-delay 0.0)

  ;; When you perform a problematic operation, flash the screen instead
  ;; of ringing the terminal bell.
  (setq ring-bell-function 'ignore)
  (setq visible-bell nil)

  ;; Don't ask `yes/no?', ask `y/n?'.
  (fset 'yes-or-no-p 'y-or-n-p)

  ;; Ask if you're sure that you want to close Emacs.
  (setq confirm-kill-emacs 'y-or-n-p)

  ;; Don't present the usual startup message, and clear the scratch buffer.
  (setq inhibit-startup-message t)
  (setq initial-scratch-message nil)

  ;; When something changes a file, automatically refresh the buffer
  ;; containing that file so they can't get out of sync.
  (global-auto-revert-mode t)

  ;; Move everything to trash first
  (setq delete-by-moving-to-trash t)

  ;; No reason to use any other type. Might be disabled dependant on the
  ;; current mode.
  (setq display-line-numbers-type 'relative)

  ;; Use tabs for everything (https://youtu.be/SsoOG6ZeyUI)
  (setq indent-tabs-mode t)
  (setq indent-line-function 'insert-tab)

  ;; Launch emacs in fullscreen mode
  (add-to-list 'default-frame-alist '(fullscreen . maximized))

  ;; Save the location within a file.
  (save-place-mode t)

  ;; Set always to UTF-8, only display in bar if not UTF-8
  (set-language-environment "UTF-8")

  ;; Menu bar
  (tool-bar-mode 0)
  (menu-bar-mode 0)
  (scroll-bar-mode -1)

  ;; Minibuffer
  (set-window-scroll-bars (minibuffer-window) nil nil)

  ;; Use smoth scrolling
  (setq scroll-conservatively 100)

  ;; Highlight the current line
  (global-hl-line-mode)

  ;; Error handling
  ;; (setq warning-minimum-level :emergency)

  ;; Make it affect all buffers.
  (setq-default mode-line-format nil)

  ;; Line wrap mode
  (add-hook 'text-mode-hook 'auto-fill-mode)
  (add-hook 'gfm-mode-hook 'auto-fill-mode)
  (add-hook 'org-mode-hook 'auto-fill-mode)

  (setq backup-directory-alist
        `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
        `((".*" ,temporary-file-directory t)))

  (setq byte-compile-warnings '(cl-functions))

  ;; Reopen files after restart
  (desktop-save-mode 1)
  (savehist-mode 1)
  (add-to-list 'savehist-additional-variables 'kill-ring)
#+end_src
** Common
Some common libraries as general dependencies. 
#+begin_src emacs-lisp
(use-package async
  :straight t
  )
(use-package aio
  :straight t
  )
(use-package cl-lib
  :straight t
  )
(use-package s
  :straight t
  )
(use-package dash
  :straight t
  )
#+end_src
** Extras
Add =resources/= to the path. Add it both to the load-path as well as
custom-theme-load-path.
#+begin_src emacs-lisp
(add-to-list 'load-path "~/.emacs.d/resources/")
(add-to-list 'custom-theme-load-path "~/.emacs.d/resources/")
#+end_src
** Files
Install =no-littering= to handle all temp files.
#+begin_src emacs-lisp
(use-package no-littering
  :straight t
  )
#+end_src
* Design
Anything related to design and looks.
** Theme
#+begin_src emacs-lisp
  ;;(load-theme 'jeykey-dark t)
  (set-cursor-color "#D069D6")
  (set-face-background 'hl-line "#303440")
  (custom-set-faces '(org-ellipsis ((t (:foreground "#6483b5" :underline nil)))))

  (use-package doom-themes
    :straight t
    :config
    (load-theme 'doom-Iosvkem t)
    )
#+end_src
** Font
Set the default font & functions for changing the font size.
#+begin_src emacs-lisp
  (setq hrs/default-fixed-font "Fira Code")
  (setq hrs/default-fixed-font-size 90)
  (setq hrs/current-fixed-font-size hrs/default-fixed-font-size)
  (set-face-attribute 'default nil
                      :family hrs/default-fixed-font
                      :height hrs/current-fixed-font-size)
  (set-face-attribute 'fixed-pitch nil
                      :family hrs/default-fixed-font
                      :height hrs/current-fixed-font-size)

  (setq hrs/font-change-increment 1.1)

  (defun hrs/set-font-size ()
    "Change default, fixed-pitch, and variable-pitch font sizes to match respective variables."
    (set-face-attribute 'default nil
                        :height hrs/current-fixed-font-size)
    (set-face-attribute 'fixed-pitch nil
                        :height hrs/current-fixed-font-size)
    )

  (defun hrs/reset-font-size ()
    "Revert font sizes back to defaults."
    (interactive)
    (setq hrs/current-fixed-font-size hrs/default-fixed-font-size)
    (hrs/set-font-size))

  (defun hrs/increase-font-size ()
    "Increase current font sizes by a factor of `hrs/font-change-increment'."
    (interactive)
    (setq hrs/current-fixed-font-size
          (ceiling (* hrs/current-fixed-font-size hrs/font-change-increment)))
    (hrs/set-font-size))

  (defun hrs/decrease-font-size ()
    "Decrease current font sizes by a factor of `hrs/font-change-increment', down to a minimum size of 1."
    (interactive)
    (setq hrs/current-fixed-font-size
          (max 1
               (floor (/ hrs/current-fixed-font-size hrs/font-change-increment))))
    (hrs/set-font-size))

  (define-key global-map (kbd "C-)") 'hrs/reset-font-size)
  (define-key global-map (kbd "C-+") 'hrs/increase-font-size)
  (define-key global-map (kbd "C-=") 'hrs/increase-font-size)
  (define-key global-map (kbd "C-_") 'hrs/decrease-font-size)
  (define-key global-map (kbd "C--") 'hrs/decrease-font-size)

  (hrs/reset-font-size)
#+end_src
** Numbers
#+begin_src emacs-lisp
  (use-package nlinum
    :straight t
    :config
    (global-nlinum-mode)
    )
#+end_src
** Modeline
Use feebeline as a /in-minibuffer-modeline/.
#+begin_src emacs-lisp
  (setq telephone-line-primary-left-separator 'telephone-line-cubed-left
        telephone-line-secondary-left-separator 'telephone-line-cubed-hollow-left
        telephone-line-primary-right-separator 'telephone-line-cubed-right
        telephone-line-secondary-right-separator 'telephone-line-cubed-hollow-right)
  (setq telephone-line-height 24
        telephone-line-evil-use-short-tag t)

  (use-package telephone-line
    :straight t
    :config
    (telephone-line-mode t))
#+end_src
** Rainbow
Install rainbow-delimiters & enable it for programming & org-mode.
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :straight t
    :config
    (add-hook 'org-mode-hook #'rainbow-delimiters-mode)
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
    )
#+end_src
** Icons
Install icons using =all-the-icons-install-fonts=
#+begin_src emacs-lisp
(use-package all-the-icons
  :straight t
  )
#+end_src
** Symbols
Enable prettify-symbols mode & set custom symbols for =org-mode=.
#+begin_src emacs-lisp
  (setq-default prettify-symbols-alist '(("#+BEGIN_SRC" . "λ")
                                         ("#+END_SRC" . "λ")
                                         ("#+begin_src" . "λ")
                                         ("#+end_src" . "λ")
                                         ("#+TITLE:" . "𝙏")
                                         ("#+title:" . "𝙏")
                                         ("#+SUBTITLE:" . "𝙩")
                                         ("#+subtitle:" . "𝙩")
                                         ("#+DATE:" . "𝘿")
                                         ("#+date:" . "𝘿")
                                         ("#+PROPERTY:" . "☸")
                                         ("#+property:" . "☸")
                                         ("#+OPTIONS:" . "⌥")
                                         ("#+options:" . "⌥")
                                         ("#+LATEX_HEADER:" . "⇾")
                                         ("#+latex_header:" . "⇾")
                                         ("#+LATEX_CLASS:" . "⇥")
                                         ("#+latexx_class:" . "⇥")
                                         ("#+ATTR_LATEX:" . "🄛")
                                         ("#+attr_latex:" . "🄛")
                                         ("#+LATEX:" . "ℓ")
                                         ("#+latex:" . "ℓ")
                                         ("#+ATTR_HTML:" . "🄗")
                                         ("#+attr_html:" . "🄗")
                                         ("#+BEGIN_QUOTE:" . "❮")
                                         ("#+begin_quote:" . "❮")
                                         ("#+END_QUOTE:" . "❯")
                                         ("#+end_quote:" . "❯")
                                         ("#+CAPTION:" . "☰")
                                         ("#+caption:" . "☰")
                                         (":PROPERTIES:" . "⚙")
                                         (":properties:" . "⚙")
                                         ("#+AUTHOR:" . "A")
                                         ("#+author:" . "A")
                                         ("#+IMAGE:" . "I")
                                         ("#+image:" . "I")
                                         ("#+LANGUAGE:" . "L")
                                         ("#+language:" . "L")
                                         ))

  (setq prettify-symbols-unprettify-at-point 'right-edge)
  (add-hook 'org-mode-hook 'prettify-symbols-mode)
  (global-prettify-symbols-mode 1)
#+end_src

* Navigation
General settings & packages for navigating buffers and files.
** Vertico
Partially copied from =SystemCrafters=.
#+begin_src emacs-lisp
  (defun dw/minibuffer-backward-kill (arg)
    "When minibuffer is completing a file name delete up to parent
                                folder, otherwise delete a word"
    (interactive "p")
    (if minibuffer-completing-file-name
        (if (string-match-p "/." (minibuffer-contents))
            (zap-up-to-char (- arg) ?/)
          (delete-minibuffer-contents))
      (backward-kill-word arg)))

  (use-package vertico
    :straight t
    :custom-face
    (vertico-current ((t (:background "#3a3f5a"))))
    :bind (:map vertico-map
                ("C-j" . vertico-next)
                ("C-k" . vertico-previous)
                ("C-f" . vertico-exit)
                :map minibuffer-local-map
                ("C-l" . dw/minibuffer-backward-kill))
    :init
    (vertico-mode)

    (setq vertico-cycle t)
    )
#+end_src    
** Improved completion
Corf & Orderless for improved completion in region.
#+begin_src emacs-lisp
  (use-package corfu
    :straight t
    :bind (:map corfu-map
                ("C-j" . corfu-next)
                ("C-k" . corfu-previous)
                ("C-f" . corfu-insert))
    :custom
    (corfu-cycle t)
    :config
    (corfu-global-mode))

  (use-package orderless
    :straight t
    :init
    (setq completion-styles '(orderless)
          completion-category-defaults nil
          completion-category-overrides '((file (styles .
    (partial-completion))))))
#+end_src

** History
Save commands between restarts.
#+begin_src emacs-lisp
  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
    :init
    (savehist-mode)
    )
#+end_src
** Search
Use consult for improved search.
#+begin_src emacs-lisp
  (use-package consult
    :straight t
    :bind (("C-s" . consult-line)
           ("M-s" . consult-imenu)
           :map minibuffer-local-map
           ("C-r" . consult-history))
    :config
    (consult-preview-at-point-mode)
    )
#+end_src
** Annotations
Add /margin notes/ in vertico buffers.
#+begin_src emacs-lisp
  (use-package marginalia
    :after vertico
    :straight t
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
    :init
    (marginalia-mode)
    )
#+end_src

** Buffers
Use =bufler= to manage buffers.
#+begin_src emacs-lisp
  (use-package bufler
    :straight t
    :config
    (bufler-mode)
    )
#+end_src
** Windows
Use =ace-windows= for quickly switching between multiple windows.
#+begin_src emacs-lisp
  (use-package ace-window
    :straight t
    :init
    (setq aw-scope 'frame ; limit to single frame
	  aw-keys '(?a ?o ?e ?u ?i ?d ?h ?t ?n)
	  )
    )
#+end_src
** Scrolling
   Use =good-scroll= to move more easily through files.
   #+begin_src emacs-lisp
     (setq scroll-margin 8)

     (use-package good-scroll
       :straight t
       :config
       (good-scroll-mode 1)
       )
   #+end_src
** Helpers
Easy helper functions for quickly opening new buffers.
#+begin_src emacs-lisp
  (defun hrs/split-window-below-and-switch ()
    "Split the window horizontally, then switch to the new pane."
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1)
    (bufler-switch-buffer)
    )

  (defun hrs/split-window-right-and-switch ()
    "Split the window vertically, then switch to the new pane."
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1)
    (bufler-switch-buffer)
    )

(global-set-key (kbd "C-x 2") 'hrs/split-window-below-and-switch)
(global-set-key (kbd "C-x 3") 'hrs/split-window-right-and-switch)
#+end_src
** Evil
#+begin_src emacs-lisp
  (use-package evil
    :straight t
    :config (evil-mode 1)
    :diminish (undo-tree-mode)
    :init
    (setq evil-want-keybinding nil)
    )

  (use-package evil-goggles
    :straight t
    :config
    (evil-goggles-mode)
    )

  ;; Settings
  (setq evil-move-cursor-back nil
        evil-move-beyond-eol t
        evil-ex-complete-emacs-commands nil
        evil-vsplit-window-right t
        evil-split-window-below t
        )

  (use-package evil-collection
    :straight t
    :config
    (evil-collection-init)
    )

  (use-package evil-org
    :straight t
    :after org
    :hook (org-mode . (lambda () evil-org-mode))
    )

  (use-package evil-surround
    :straight t
    :config
    (global-evil-surround-mode 1)
    )
#+END_SRC
** Keybinds
*** Motion
Navigation and normal modes.
#+begin_src emacs-lisp
  (use-package general
    :straight t
    :config
    (general-define-key
     :states '(motion visual normal)
     "h" 'evil-next-line
     "H" 'evil-forward-paragraph

     "t" 'evil-previous-line
     "T" 'evil-backward-paragraph

     "d" 'evil-backward-char
     "D" 'evil-first-non-blank

     "n" 'evil-forward-char
     "N" 'evil-last-non-blank

     "s" 'evil-open-below
     "S" 'evil-open-above

     "w" 'kill-line

     "j" 'evil-backward-word-begin
     "J" 'evil-backward-section-begin

     "k" 'evil-forward-word-end
     "K" 'evil-forward-section-end

     "'" 'evil-first-non-blank
     "c" 'evil-end-of-line
     )
    )
#+end_src
*** Leader
#+begin_src emacs-lisp
  (general-create-definer my-leader-def
    ;; :prefix my-leader
    :prefix "SPC")
#+end_src
*** Easy
#+begin_src emacs-lisp
(my-leader-def
   :keymaps 'normal
   "." 'execute-extended-command
   "," 'find-file
   ";" 'bufler-switch-buffer
   "a" 'org-agenda
   "c" 'org-capture
   "d" 'org-schedule
   "t" 'org-todo
   "x" 'todo/done
   )
#+end_src
*** Buffers
#+begin_src emacs-lisp
  (my-leader-def
   :keymaps 'normal
   "bs" 'save-buffer
   "bk" 'kill-current-buffer
   "bj" 'kill-buffer-and-window
   "bb" 'bufler-switch-buffer
   "bh" 'previous-buffer
   )
#+end_src
*** Windows
#+begin_src emacs-lisp
(my-leader-def
   :keymaps 'normal
   "wv" 'evil-window-vsplit
   "wk" 'hrs/split-window-below-and-switch
   "wc" 'hrs/split-window-right-and-switch
   "wj" 'delete-other-windows
   "wo" 'ace-window
   )
#+end_src
*** Search
#+begin_src emacs-lisp
  (my-leader-def
    :keymaps 'normal
    "ss" 'consult-line
    "f" 'consult-line
    "sS" 'consult-imenu
    "sr" 'replace-string
    "sg" 'consult-ripgrep
    )
#+end_src
*** Emacs
#+begin_src emacs-lisp
(my-leader-def
   :keymaps 'normal
   "qq" 'save-buffers-kill-terminal
   "qs" 'kill-emacs
   "qe" 'eshell
   )
#+end_src
*** org-mode
#+begin_src emacs-lisp
(my-leader-def
   :keymaps 'normal
   "ot" 'counsel-org-tag
   "or" 'org-refile
   "ol" 'org-insert-link
   "oo" 'org-open-at-point
   "op" 'org-link-open-as-file
   "of" 'org-agenda-file-to-front
   "oe" 'org-export-dispatch
   "oa" 'org-archive-subtree
   )
#+end_src
*** Magit
#+begin_src emacs-lisp
  (my-leader-def
    :keymaps 'normal
    "gg" 'magit-status
    "gi" 'magit-init
    "gm" 'git-messenger:popup-message
    "gp" 'magit-pull
    )
#+end_src
*** Content
#+begin_src emacs-lisp
(my-leader-def
   :keymaps 'normal
   "nl" 'org-roam-buffer-toggle
   "ni" 'org-roam-insert
   "nf" 'org-roam-find-file
   "nc" 'org-roam-capture
   "nr" 'org-roam-random-note
   "ns" 'org-roam-server-mode
   "nd" 'org-drill
   )

#+end_src
*** Email
#+begin_src emacs-lisp
  (my-leader-def
    :keymaps 'normal
    "mo" 'mu4e
    "mc" 'mu4e-compose-new
    "mm" 'message-send-and-exit
    "ma" 'mail-add-attachment
    "ms" 'mml-secure-message-sign-pgp
    "me" 'mml-secure-message-encrypt-pgp
    "mj" 'mu4e~headers-jump-to-maildir
    "ml" 'mu4e~view-browse-url-from-binding
    "mf" 'mu4e~view-save-attach-from-binding
    )
#+end_src
*** Non Evil
Non evil binds
#+begin_src emacs-lisp
(global-set-key (kbd "C-x j") 'kill-buffer-and-window)
(global-set-key (kbd "C-x o") 'ace-window)
#+end_src
* Programming
General settings & packages for programming, including all programming
major-modes.
** Flycheck
Global syntax checking.
#+begin_src emacs-lisp
  (use-package flycheck
    :straight t
    :config
    (global-flycheck-mode)
    )

  (use-package flycheck-rust
    :straight t
    :config (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))
#+end_src
** Magit
   Use =magit= with some additional packages.
   #+begin_src emacs-lisp
     (use-package magit
       :straight t
       :config
       (global-set-key (kbd "C-x g") 'magit-status)
       (global-set-key (kbd "C-x p") 'magit-init)
       (global-set-key (kbd "C-v") 'magit-commit)
       (use-package magit-todos
         :straight t
         :config
         (magit-todos-mode t)
         )
       (use-package git-messenger
         :straight t
         :config
         (global-set-key (kbd "C-x m") 'git-messenger)
         )
       )

     (with-eval-after-load 'magit-mode
       (add-hook 'after-save-hook 'magit-after-save-refresh-status t))
   #+end_src
** LSP
Setup =LSP= & =LSP-UI=, mainly for Elixir, later also for Rust.
#+begin_src emacs-lisp
  (add-to-list 'exec-path "~/.tools/elixir-ls")

  (setq lsp-ui-doc-max-height 52
        lsp-ui-doc-max-width 64
        lsp-ui-doc-position 'at-point
        lsp-ui-doc-position 'bottom
        lsp-ui-doc-show-with-mouse t
        lsp-ui-doc-show-with-cursor t
        )

  (use-package lsp-mode
    :straight t
    :commands lsp
    :init
    (setq lsp-headerline-breadcrumb-enable nil)
    (setq lsp-signature-auto-activate nil)
    (setq lsp-idle-delay 0.6)
    (setq lsp-rust-analyzer-server-display-inlay-hints t)
    (setq lsp-rust-analyzer-inlay-hints-mode t)
    :hook
    (elixir-mode . lsp)
    (rustic-mode . lsp)
    )

  (use-package lsp-ui
    :straight t
    :commands lsp-ui-mode
    :config
    (lsp-ui-doc-enable t)
    (lsp-ui-mode)
    (setq lsp-ui-doc-max-height 128
          lsp-ui-doc-max-width 64
          lsp-ui-doc-position 'top
          lsp-ui-doc-show-with-mouse t
          lsp-ui-doc-show-with-cursor t
          )
    )
#+end_src
** Smartparens
   Automatically insert following parens.
   #+begin_src emacs-lisp
     (use-package smartparens
       :straight t
       :hook
       (after-init . smartparens-global-mode)
       :config
       (require 'smartparens-config)
       (sp-pair "=" "=" :actions '(wrap))
       (sp-pair "+" "+" :actions '(wrap))
       (sp-pair "<" ">" :actions '(wrap))
       (sp-pair "$" "$" :actions '(wrap))
       )

   #+end_src
** Company
   Used not just for programming, but easier to configure here.
   #+begin_src emacs-lisp
     (use-package company
       :straight t
       :config
       (setq company-idle-delay 0.3)
       (add-hook 'after-init-hook 'global-company-mode)
       )

     (use-package company-box
       :straight t
       :hook (company-mode . company-box-mode)
       )
   #+end_src
** Snippets
   Use yasnippets and the snippets for that.
   #+begin_src emacs-lisp
     (use-package yasnippet
       :straight t
       :config
       (use-package yasnippet-snippets
         :straight t
         )
       (yas-global-mode 1)
       (setq yas-indent-line 'auto)
       )
   #+end_src
** Comments
Edit comments like org-source-blocks in org/md.
#+begin_src emacs-lisp
  (use-package separedit
    :straight t
    :config
    (define-key prog-mode-map        (kbd "C-c '") #'separedit)
    (define-key minibuffer-local-map (kbd "C-c '") #'separedit)
    (define-key help-mode-map        (kbd "C-c '") #'separedit)
    )
#+end_src
** Format
   Use =format-all= to language specific formatting.
   #+begin_src emacs-lisp
     (use-package format-all
       :straight t
       :bind ("C-c C-f" . format-all-buffer)
       )
   #+end_src
** Flycheck
Inline errors
#+begin_src emacs-lisp
  (use-package flycheck
    :straight t
    )
#+end_src
** Rust
Development settings for rust.
#+begin_src emacs-lisp
  (use-package rustic
    :straight t
    :bind (:map rustic-mode-map
                ("C-c r" . rustic-cargo-run)
                ("C-c C-r" . lsp-rename)
                ("C-c C-c s" . lsp-rust-analyzer-status)
                ("M-RET" . comment-indent-new-line))
    :config
    ;; uncomment for less flashiness
    ;; (setq lsp-eldoc-hook nil)
    ;; (setq lsp-enable-symbol-highlighting nil)
    ;; (setq lsp-signature-auto-activate nil)

    (setq rustic-format-on-save t)
    )

  (use-package cargo
    :straight t
    :hook (rust-mode . cargo-minor-mode))

  (use-package toml-mode
    :straight t
    )
#+end_src
** Modes
   Collection of programming major modes.
   #+begin_src emacs-lisp
     (use-package web-mode
       :straight t
       :config
       (add-hook 'web-mode-hook
                 (lambda ()
                   (rainbow-mode)
                   (rspec-mode)
                   (setq web-mode-markup-indent-offset 2)))
       )

     (use-package elixir-mode
       :straight t
       )

     (use-package markdown-mode
       :straight t
       )

     (use-package systemd
       :straight t
       :mode
       ("\\.service\\'" "\\.timer\\'" "\\.target\\'" "\\.mount\\'"
        "\\.automount\\'" "\\.slice\\'" "\\.socket\\'" "\\.path\\'"
        "\\.netdev\\'" "\\.network\\'" "\\.link\\'"))

     (use-package yaml-mode
       :straight t
       :mode ("\\.yaml\\'" "\\.yml\\'")
       :custom-face
       (font-lock-variable-name-face ((t (:foreground "violet"))))
       )

     (require 'wgsl-mode)
   #+end_src

* Writing
=org-mode= config for writing & productivity.
** Base
   General settings & config.
   #+begin_src emacs-lisp
     (use-package org
       :straight t
       )

     (setq
      org-directory "~/documents/"
      org-archive-location "~/archive/2021.org::* From %s"
      org-agenda-files '("~/supervisor/supervisor.org")
      )

     (add-hook 'org-mode 'org-toggle-inline-images)
     (setq org-image-actual-width '(600))
     (setq-default org-display-inline-images t)
     (setq-default org-startup-with-inline-images t)

     (setq org-ellipsis " ▼ "
           org-adapt-indentation nil
           org-fontify-quote-and-verse-blocks t
           org-startup-folded t
           org-priority-highest ?A
           org-priority-lowest ?C
           org-priority-faces
           '((?A . 'all-the-icons-red)
             (?B . 'all-the-icons-orange)
             (?C . 'all-the-icons-yellow))
           org-src-tab-acts-natively t
           org-hide-emphasis-markers t
           org-src-window-setup 'current-window
           org-return-follows-link t
           org-confirm-babel-evaluate nil
           org-use-speed-commands t
           org-catch-invisible-edits 'show
           )
     (add-hook 'org-mode-hook 'org-indent-mode)

     (use-package org-tempo)
   #+end_src
** Tables
   Use prettier tables.
   #+begin_src emacs-lisp
     (require 'org-pretty-table)
     (add-hook 'org-mode-hook 'org-pretty-table-mode)
   #+end_src
** Looks
   Use nicer faces for headings & deadlines.
   #+begin_src emacs-lisp
     (setq org-agenda-deadline-faces
	   '((1.001 . error)
	     (1.0 . org-warning)
	     (0.5 . org-upcoming-deadline)
	     (0.0 . org-upcoming-distant-deadline)))

     (custom-set-faces
       '(org-level-1 ((t (:inherit outline-1 :height 1.60))))
       '(org-level-2 ((t (:inherit outline-2 :height 1.40))))
       '(org-level-3 ((t (:inherit outline-3 :height 1.20))))
       '(org-level-4 ((t (:inherit outline-4 :height 1.0))))
       '(org-level-5 ((t (:inherit outline-5 :height 1.0))))
     )
   #+end_src
** Appear
   Use =org-appear= for nicer symbols in text.
   #+begin_src emacs-lisp
     (use-package org-appear
       :straight t
       :hook (org-mode . org-appear-mode)
       :init (setq org-hide-emphasis-markers t
		   org-appear-autoemphasis t
		   org-appear-autolinks t
		   org-appear-autosubmarkers t)
       )
   #+end_src
** Spellcheck
Enable =hunspell= & =flyspell= for all =org-mode= buffers.
#+begin_src emacs-lisp
  (setq ispell-program-name "hunspell")

  (setq ispell-local-dictionary "de_DE")
  (setq ispell-local-dictionary-alist
        '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US") nil utf-8)
          ("de_DE" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "de_DE" "-a" "-i" "UTF-8") nil utf-8)))

  (add-hook 'text-mode-hook #'flyspell-mode)
  (add-hook 'org-mode-hook #'flyspell-mode)

  (add-hook 'ispell-change-dictionary-hook #'flyspell-buffer)
#+end_src
** Superstar
   Use better stars for headings and for TODOs.
   #+begin_src emacs-lisp
     (use-package org-superstar
       :straight t
       :config
       (setq org-superstar-headline-bullets-list '("◉" "○" "✸" "✿" "✤" "✜" "◆" "▶")
             ;;org-superstar-headline-bullets-list '("Ⅰ" "Ⅱ" "Ⅲ" "Ⅳ" "Ⅴ" "Ⅵ" "Ⅶ" "Ⅷ" "Ⅸ" "Ⅹ")
             org-superstar-prettify-item-bullets t
             org-superstar-configure-like-org-bullets t
             org-hide-leading-stars nil
             org-superstar-leading-bullet ?\s
             ;; Enable custom bullets for TODO items
             ;; TODO: update todo types
             org-superstar-special-todo-items t
             org-superstar-todo-bullet-alist '(("TODO" "☐ ")
                                               ("NEXT" "✒ ")
                                               ("STATIC" "» ")
                                               ("BLOCKED" "˧ ")
                                               ("DONE" "✔ ")
                                               ("PAL" "✔ ")
                                               )
             )
       (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
       )

   #+end_src
** Productivity
   General productivity settings & capture templates.
   TODO: Update paths
   #+begin_src emacs-lisp
     (setq
      org-log-done 'time
      org-todo-keywords
      '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
        (sequence "PROCESS(p)" "BLOCKED(b)" "|" "PAL(a)"))
      org-todo-keyword-faces
      '(("TODO" . (:foreground "#af1212" :weight bold))
        ("NEXT" . (:foreground "#a8fa80" :weight bold))
        ("BLOCKED" . (:foreground "#b213c4" :weight bold))
        ("PAL" . (:foreground "#30bb03" :weight bold))
        ("PROCESS" . (:foreground "#eaa222" :weight bold))
        ("DONE" . (:foreground "#ffffff" :weight bold))
        )
      org-tag-alist '(("home" . ?h)
                      ("actaeon" . ?a)
                      ("orion" . ?o)
                      ("schule" . ?s)
                      )
      )

     (use-package org-super-agenda
       :straight t
       :config
       (org-super-agenda-mode)
       )

       (require 'eps)
   #+end_src

** Tags
Settings tags normally is broken, so counsel is required.
#+begin_src emacs-lisp
  (use-package counsel
    :straight t
    )
#+end_src
** Repetition
   =org-drill= for spaced repetition.
   #+begin_src emacs-lisp
     (use-package org-drill
       :straight t
       :config
       (setq org-drill-use-visible-cloze-face-p t)
       (setq org-drill-hide-item-headings-p t)
       )
   #+end_src
** LaTeX
   Inline LaTeX using =org-fragtog=.
   #+begin_src emacs-lisp
     (setq-default org-startup-with-latex-preview t)

     (setq TeX-parse-self t)
     (setq TeX-auto-save t)

     (setq TeX-PDF-mode t)

     (add-hook 'LaTeX-mode-hook
               (lambda ()
                 (LaTeX-math-mode)
                 (setq TeX-master t)))

     (use-package org-fragtog
       :straight t
       :config
       (add-hook 'org-mode-hook 'org-fragtog-mode)
       (setq org-latex-preview-ltxpng-directory "~/.ltxpng/")
       )
   #+end_src
** Export
   All export targets in =ox=.
   #+begin_src emacs-lisp
     (eval-after-load "org" '(require 'ox-odt nil t))

     (use-package htmlize
       :straight t)

     (use-package ox-pandoc
       :straight t
       )

     (use-package ox-hugo
       :straight t
       :config
       (setq org-hugo-auto-set-lastmod t)
       )

     (use-package plantuml-mode
       :straight t
       :config
       (setq org-plantuml-jar-path (expand-file-name "~/.tools/plantuml.jar"))
       (add-to-list 'org-src-lang-modes '("plantuml" . plantuml))
       )

     (use-package ox-reveal
       :straight t
       :custom ((org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js")
                (org-reveal-mathjax t)
                (org-reveal-ignore-speaker-notes nil)
                (org-reveal-note-key-char nil)))
   #+end_src
   Babel & org-source-blocks.
   #+begin_src emacs-lisp
     (use-package ob-elixir
       :straight t
       )

     (use-package ob-rust
       :straight t
       )

     (use-package ob-go
       :straight t
       )

     (org-babel-do-load-languages
      'org-babel-load-languages
      '((emacs-lisp . t)
        (elixir . t)
        (latex . t)
        (rust . t)
        ))
    #+end_src
    Latex export command & highlighted code blocks.
    #+begin_src emacs-lisp
      (require 'ox-latex)
      (add-to-list 'org-latex-packages-alist '("" "minted"))
      (setq org-latex-listings 'minted)

      (setq org-latex-pdf-process
            '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
              "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
              "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

      (setq org-src-fontify-natively t)

      ;; Open directly PDFs in browser.
      (setcdr (assoc "\\.pdf\\'" org-file-apps) "brave %s")
   #+end_src
** Title 
   Easy brute force title page.
   #+begin_src emacs-lisp
     (defun jk/title-title ()
       (car (org-roam--extract-titles-title))
       )

     (defun jk/title-author ()
       (cdr (car (org-roam--extract-global-props '("AUTHOR"))))
       )
     (defun jk/title-image ()
       (cdr (car (org-roam--extract-global-props '("IMAGE"))))
       )
     (defun jk/title-subtitle ()
       (cdr (car (org-roam--extract-global-props '("SUBTITLE"))))
       )

     (defun jk/title-compose ()
       (interactive)
       (insert (concat "
     ,#+LATEX_HEADER: \\usepackage[utf8]{inputenc}
     ,#+LATEX_HEADER: \\usepackage[dvipsnames]{xcolor}
     ,#+LATEX_HEADER: \\usepackage{tikz}
     ,#+LATEX_HEADER: \\usepackage[]{babel}
     \\begin{titlepage}
	 \\begin{center}
	     \\begin{tikzpicture}[remember picture,overlay]
		 \\node[anchor=north west,yshift=-1.5pt,xshift=1pt]%
		 at (current page.north west)
		 {\\includegraphics[scale=1]{~/.tools/"
		       (jk/title-image)
		       ".png}};
     \\end{tikzpicture}

	     \\vspace{2.2cm}

	     \\Huge
	     \\textbf{"
		       (jk/title-title)
		       "}

	     \\vspace{3.0cm}
	     \\LARGE"
		       (jk/title-subtitle)
		       "
     \\vspace{4.2cm}"

		       (jk/title-author)

	     "\\
	     \\vfill

	     \\Large
	     Baden, Schweiz\\
	     \\today
	 \\end{center}
     \\end{titlepage}
     \\tableofcontents
     \\newpage"
		)
	       )
       )
   #+end_src   

* Communication
=mu4e= and packages collection.
#+begin_src emacs-lisp
  (setq mu4e-maildir (expand-file-name "~/.mail"))

  (add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e")
  (require 'mu4e)
  (require 'smtpmail)

  (setq mu4e-completing-read-function 'ivy-completing-read)
  (setq mail-user-agent 'mu4e-user-agent)

  (setq user-mail-address "jakob@jeykey.net"
        user-full-name  "Jakob Klemm"

        mu4e-get-mail-command "mbsync -c ~/.tools/.mbsyncrc -a"
        mu4e-update-interval  300
        mu4e-index-update-in-background t
        mu4e-main-buffer-hide-personal-addresses t

        send-mail-function 'smtpmail-send-it
        message-send-mail-function 'message-smtpmail-send-it
        starttls-use-gnutls t

        mu4e-sent-messages-behavior 'delete

        mu4e-view-show-addresses t

        message-kill-buffer-on-exit t

        mu4e-attachment-dir  "~/workspace/"

        mu4e-sent-folder "/global/Sent"
        mu4e-drafts-folder "/global/Drafts"
        mu4e-trash-folder "/global/Trash"
        message-signature
        (concat
         "Jakob Klemm\n"
         "https://github.com/jakobklemm"
         "https://jeykey.net\n")
        mml-secure-openpgp-sign-with-sender t
        mml-secure-openpgp-encrypt-to-self t
        mml-secure-smime-sign-with-sender "jakob@jeykey.net"

        mu4e-view-prefer-html t
        )

  ;; Private script to setup all mail addrs
  (load-file "~/.tools/mail.el")

  (setq smtpmail-starttls-credentilas my-mu4e-account-alist)
  (setq smtpmail-default-smtp-server "smtp.gmail.com"
        smtpmail-smtp-server "smtp.gmail.com"
        smtpmail-smtp-service 587
        smtpmail-debug-info t)

  (use-package mu4e-alert
    :straight t
    :config
    (mu4e-alert-set-default-style 'libnotify)
    (add-hook 'after-init-hook #'mu4e-alert-enable-notifications)
    )

  (defun my-mu4e-set-account ()
    "Set the account for composing a message."
    (let* ((account
            (if mu4e-compose-parent-message
                (let ((maildir (mu4e-message-field mu4e-compose-parent-message :maildir)))
                  (string-match "/\\(.*?\\)/" maildir)
                  (match-string 1 maildir))
              (completing-read (format "Compose with account: (%s) "
                                       (mapconcat #'(lambda (var) (car var))
                                                  my-mu4e-account-alist "/"))
                               (mapcar #'(lambda (var) (car var)) my-mu4e-account-alist)
                               nil t nil nil (caar my-mu4e-account-alist))))
           (account-vars (cdr (assoc account my-mu4e-account-alist))))
      (if account-vars
          (mapc #'(lambda (var)
                    (set (car var) (cadr var)))
                account-vars)
        (error "No email account found"))))

  (add-hook 'mu4e-compose-pre-hook 'my-mu4e-set-account)
  (add-hook 'mu4e-view-mode-hook 'visual-line-mode)
  (add-hook 'mu4e-compose-mode-hook 'visual-line-mode)
  #+end_src


